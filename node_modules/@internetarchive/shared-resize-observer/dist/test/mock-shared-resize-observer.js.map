{"version":3,"file":"mock-shared-resize-observer.js","sourceRoot":"","sources":["../../test/mock-shared-resize-observer.ts"],"names":[],"mappings":"AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsCG;AACH,MAAM,OAAO,wBAAwB;IAUnC,YAAY,OAGX;QAZO,mBAAc,GAGlB,IAAI,GAAG,EAAE,CAAC;QAUZ,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACvC,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,mBAAmB,CAAC;IACzD,CAAC;IAED,WAAW,CAAC,OAIX;;QACC,MAAM,QAAQ,GAAG,MAAA,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,mCAAI,IAAI,GAAG,EAAE,CAAC;QACtE,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC9B,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAClD,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI;YAAE,OAAO;QAClB,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC;YAC3B,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,aAAa,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC;YAChD,cAAc,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC;YACjD,WAAW,EAAE,IAAI;SAClB,CAAC,CAAC;QACH,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC7B,CAAC;IAED,cAAc,CAAC,OAGd;QACC,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACzD,IAAI,CAAC,QAAQ;YAAE,OAAO;QACtB,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACjC,IAAI,QAAQ,CAAC,IAAI,KAAK,CAAC,EAAE;YACvB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SAC5C;IACH,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;IAC9B,CAAC;CACF","sourcesContent":["import type {\n  SharedResizeObserverInterface,\n  SharedResizeObserverResizeHandlerInterface,\n} from '../src/shared-resize-observer';\n\n/**\n * This mock can be used for testing the SharedResizeObserver\n *\n * Initialize it with a map of the elements that will be observed\n * and their expected sizes. Also provide a function that will be\n * called when the consumer adds an observer. This will give you the\n * opportunity to wait until it is ready.\n *\n * For example:\n *\n * it('adds a `mobile` class to the component', async () => {\n *   const el: MyComponent = await fixture(html`<my-component></my-component>`) as MyComponent;\n *   const expectedElement = el.shadowRoot?.querySelector('.my-element') as HTMLDivElement;\n *   const expectedSizes = new Map<Element, DOMRectReadOnly>();\n *\n *   // the mock shared resize observer will return the expected size for the element\n *   expectedSizes.set(expectedElement, {\n *     height: 20, width: 150, bottom: 0, left: 0, right: 0, top: 0, x: 0, y: 0, toJSON: () => ({}),\n *   });\n *\n *   // create the MockSharedResizeObserver, assign it and await the addObserverComplete\n *   // callback to resolve\n *   await new Promise<void>(resolve => {\n *     const mockResizeObserver = new MockSharedResizeObserver({\n *       targetSizes: expectedSizes,\n *       addObserverComplete: (): void => {\n *         resolve();\n *       },\n *     });\n *     el.resizeObserver = mockResizeObserver;\n *   });\n *\n *   // wait until the element is updated before testing\n *   await el.updateComplete;\n *\n *   // check if the resize observer caused your component to update\n *   expect(el.classList.contains('mobile')).to.be.true;\n * });\n */\nexport class MockSharedResizeObserver implements SharedResizeObserverInterface {\n  private resizeHandlers: Map<\n    Element,\n    Set<SharedResizeObserverResizeHandlerInterface>\n  > = new Map();\n\n  private targetSizes: Map<Element, DOMRectReadOnly>;\n\n  private addObserverComplete: () => void;\n\n  constructor(options: {\n    targetSizes: Map<Element, DOMRectReadOnly>;\n    addObserverComplete: () => void;\n  }) {\n    this.targetSizes = options.targetSizes;\n    this.addObserverComplete = options.addObserverComplete;\n  }\n\n  addObserver(options: {\n    handler: SharedResizeObserverResizeHandlerInterface;\n    target: Element;\n    options?: ResizeObserverOptions | undefined;\n  }): void {\n    const handlers = this.resizeHandlers.get(options.target) ?? new Set();\n    handlers.add(options.handler);\n    this.resizeHandlers.set(options.target, handlers);\n    const size = this.targetSizes.get(options.target);\n    if (!size) return;\n    options.handler.handleResize({\n      target: options.target,\n      borderBoxSize: [{ blockSize: 0, inlineSize: 0 }],\n      contentBoxSize: [{ blockSize: 0, inlineSize: 0 }],\n      contentRect: size,\n    });\n    this.addObserverComplete();\n  }\n\n  removeObserver(options: {\n    handler: SharedResizeObserverResizeHandlerInterface;\n    target: Element;\n  }): void {\n    const handlers = this.resizeHandlers.get(options.target);\n    if (!handlers) return;\n    handlers.delete(options.handler);\n    if (handlers.size === 0) {\n      this.resizeHandlers.delete(options.target);\n    }\n  }\n\n  shutdown(): void {\n    this.resizeHandlers.clear();\n  }\n}\n"]}