{"version":3,"file":"shared-resize-observer.js","sourceRoot":"","sources":["../../src/shared-resize-observer.ts"],"names":[],"mappings":"AAwDA,kBAAkB;AAClB,MAAM,OAAO,oBAAoB;IAAjC;QAmCE;;;;;;WAMG;QACK,mBAAc,GAAG,IAAI,cAAc,CAAC,OAAO,CAAC,EAAE;YACpD,8DAA8D;YAC9D,+BAA+B;YAC/B,wEAAwE;YACxE,0DAA0D;YAC1D,uCAAuC;YACvC,4DAA4D;YAC5D,oDAAoD;YACpD,MAAM,CAAC,qBAAqB,CAAC,GAAG,EAAE;gBAChC,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE;oBAC3B,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBACvD,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,CAAC,OAAO,CAAC,EAAE;wBAC1B,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;oBAC9B,CAAC,CAAC,CAAC;iBACJ;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH;;;;;;;;;WASG;QACK,mBAAc,GAGlB,IAAI,GAAG,EAAE,CAAC;IAChB,CAAC;IAzEC,kBAAkB;IAClB,QAAQ;QACN,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE;YAC/C,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;IAC9B,CAAC;IAED,kBAAkB;IAClB,WAAW,CAAC,OAIX;;QACC,MAAM,QAAQ,GAAG,MAAA,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,mCAAI,IAAI,GAAG,EAAE,CAAC;QACtE,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC9B,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAClD,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;IAC/D,CAAC;IAED,kBAAkB;IAClB,cAAc,CAAC,OAGd;QACC,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACzD,IAAI,CAAC,QAAQ;YAAE,OAAO;QACtB,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACjC,IAAI,QAAQ,CAAC,IAAI,KAAK,CAAC,EAAE;YACvB,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC9C,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SAC5C;IACH,CAAC;CAyCF","sourcesContent":["/**\n * An interface for objects to handle resize events for a target\n */\nexport interface SharedResizeObserverResizeHandlerInterface {\n  handleResize(entry: ResizeObserverEntry): void;\n}\n\n/**\n * The SharedResizeObserver provides a ResizeObserver that can be\n * shared amongst many elements and handlers.\n *\n * It's more efficient to run a single ResizeObserver with many\n * observations than many ResizeObservers. A singleton of\n * the SharedResizeObserver can be passed down through any element\n * that needs resize observation and get a `handleResize()` callback\n */\nexport interface SharedResizeObserverInterface {\n  /**\n   * Add an observer to the ResizeObserver.\n   *\n   * Note that this prevents double-observing so the same handler can be added\n   * to the same element multiple times and you will only get a single callback.\n   *\n   * @param {({\n   *     handler: SharedResizeObserverResizeHandlerInterface;\n   *     target: Element;\n   *     options?: ResizeObserverOptions | undefined;\n   *   })} options\n   * @memberof SharedResizeObserverInterface\n   */\n  addObserver(options: {\n    handler: SharedResizeObserverResizeHandlerInterface;\n    target: Element;\n    options?: ResizeObserverOptions | undefined;\n  }): void;\n\n  /**\n   * Remove an observer from the ResizeObserver\n   *\n   * @param {{\n   *     handler: SharedResizeObserverResizeHandlerInterface;\n   *     target: Element;\n   *   }} options\n   * @memberof SharedResizeObserverInterface\n   */\n  removeObserver(options: {\n    handler: SharedResizeObserverResizeHandlerInterface;\n    target: Element;\n  }): void;\n\n  /**\n   * Remove all observers from the SharedResizeObserver\n   */\n  shutdown(): void;\n}\n\n/** @inheritdoc */\nexport class SharedResizeObserver implements SharedResizeObserverInterface {\n  /** @inheritdoc */\n  shutdown(): void {\n    this.resizeHandlers.forEach((handlers, target) => {\n      this.resizeObserver.unobserve(target);\n    });\n    this.resizeHandlers.clear();\n  }\n\n  /** @inheritdoc */\n  addObserver(options: {\n    handler: SharedResizeObserverResizeHandlerInterface;\n    target: Element;\n    options?: ResizeObserverOptions | undefined;\n  }): void {\n    const handlers = this.resizeHandlers.get(options.target) ?? new Set();\n    handlers.add(options.handler);\n    this.resizeHandlers.set(options.target, handlers);\n    this.resizeObserver.observe(options.target, options.options);\n  }\n\n  /** @inheritdoc */\n  removeObserver(options: {\n    handler: SharedResizeObserverResizeHandlerInterface;\n    target: Element;\n  }): void {\n    const handlers = this.resizeHandlers.get(options.target);\n    if (!handlers) return;\n    handlers.delete(options.handler);\n    if (handlers.size === 0) {\n      this.resizeObserver.unobserve(options.target);\n      this.resizeHandlers.delete(options.target);\n    }\n  }\n\n  /**\n   * This is the ResizeObserver that dispatches\n   * callbacks to all of the handlers.\n   *\n   * @private\n   * @memberof SharedResizeObserver\n   */\n  private resizeObserver = new ResizeObserver(entries => {\n    // This requestAnimationFrame is to throttle the refresh rate,\n    // otherwise you get a bunch of\n    // `ResizeObserver loop completed with undelivered notifications` errors\n    // The errors are not harmful, but they happen a lot, see:\n    // https://stackoverflow.com/a/58701523\n    // https://github.com/souporserious/react-measure/issues/104\n    // https://github.com/WICG/resize-observer/issues/38\n    window.requestAnimationFrame(() => {\n      for (const entry of entries) {\n        const handlers = this.resizeHandlers.get(entry.target);\n        handlers?.forEach(handler => {\n          handler.handleResize(entry);\n        });\n      }\n    });\n  });\n\n  /**\n   * A map of all of the observed elements and their resize handlers\n   *\n   * @private\n   * @type {Map<\n   *     Element,\n   *     Set<SharedResizeObserverResizeHandlerInterface>\n   *   >}\n   * @memberof SharedResizeObserver\n   */\n  private resizeHandlers: Map<\n    Element,\n    Set<SharedResizeObserverResizeHandlerInterface>\n  > = new Map();\n}\n"]}