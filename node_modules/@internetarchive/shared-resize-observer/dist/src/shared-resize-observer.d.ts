/**
 * An interface for objects to handle resize events for a target
 */
export interface SharedResizeObserverResizeHandlerInterface {
    handleResize(entry: ResizeObserverEntry): void;
}
/**
 * The SharedResizeObserver provides a ResizeObserver that can be
 * shared amongst many elements and handlers.
 *
 * It's more efficient to run a single ResizeObserver with many
 * observations than many ResizeObservers. A singleton of
 * the SharedResizeObserver can be passed down through any element
 * that needs resize observation and get a `handleResize()` callback
 */
export interface SharedResizeObserverInterface {
    /**
     * Add an observer to the ResizeObserver.
     *
     * Note that this prevents double-observing so the same handler can be added
     * to the same element multiple times and you will only get a single callback.
     *
     * @param {({
     *     handler: SharedResizeObserverResizeHandlerInterface;
     *     target: Element;
     *     options?: ResizeObserverOptions | undefined;
     *   })} options
     * @memberof SharedResizeObserverInterface
     */
    addObserver(options: {
        handler: SharedResizeObserverResizeHandlerInterface;
        target: Element;
        options?: ResizeObserverOptions | undefined;
    }): void;
    /**
     * Remove an observer from the ResizeObserver
     *
     * @param {{
     *     handler: SharedResizeObserverResizeHandlerInterface;
     *     target: Element;
     *   }} options
     * @memberof SharedResizeObserverInterface
     */
    removeObserver(options: {
        handler: SharedResizeObserverResizeHandlerInterface;
        target: Element;
    }): void;
    /**
     * Remove all observers from the SharedResizeObserver
     */
    shutdown(): void;
}
/** @inheritdoc */
export declare class SharedResizeObserver implements SharedResizeObserverInterface {
    /** @inheritdoc */
    shutdown(): void;
    /** @inheritdoc */
    addObserver(options: {
        handler: SharedResizeObserverResizeHandlerInterface;
        target: Element;
        options?: ResizeObserverOptions | undefined;
    }): void;
    /** @inheritdoc */
    removeObserver(options: {
        handler: SharedResizeObserverResizeHandlerInterface;
        target: Element;
    }): void;
    /**
     * This is the ResizeObserver that dispatches
     * callbacks to all of the handlers.
     *
     * @private
     * @memberof SharedResizeObserver
     */
    private resizeObserver;
    /**
     * A map of all of the observed elements and their resize handlers
     *
     * @private
     * @type {Map<
     *     Element,
     *     Set<SharedResizeObserverResizeHandlerInterface>
     *   >}
     * @memberof SharedResizeObserver
     */
    private resizeHandlers;
}
