import { __awaiter } from "tslib";
import { fixture, expect, oneEvent } from '@open-wc/testing';
import { html } from 'lit';
import '../src/modal-template';
import { ModalConfig } from '../src/modal-config';
describe('Modal Template', () => {
    it('has correct default configuration', () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        const el = yield fixture(html ` <modal-template></modal-template> `);
        const processingLogo = (_a = el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.processing-logo');
        const headline = (_b = el.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('.headline');
        const message = (_c = el.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelector('.message');
        const title = (_d = el.shadowRoot) === null || _d === void 0 ? void 0 : _d.querySelector('h1.title');
        expect(headline).to.not.exist;
        expect(message).to.not.exist;
        expect(title).to.not.exist;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        expect('hidden' in processingLogo.classList);
    }));
    it('does not show the title if one not provided', () => __awaiter(void 0, void 0, void 0, function* () {
        var _e;
        const config = new ModalConfig();
        config.title = undefined;
        const el = yield fixture(html `
      <modal-template .config=${config}></modal-template>
    `);
        const title = (_e = el.shadowRoot) === null || _e === void 0 ? void 0 : _e.querySelector('h1.title');
        expect(title).to.not.exist;
    }));
    it('emits closeButtonPressed event when close button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        var _f;
        const el = yield fixture(html ` <modal-template></modal-template> `);
        const closeButton = (_f = el.shadowRoot) === null || _f === void 0 ? void 0 : _f.querySelector('.close-button');
        const clickEvent = new MouseEvent('click');
        setTimeout(() => {
            closeButton === null || closeButton === void 0 ? void 0 : closeButton.dispatchEvent(clickEvent);
        });
        const response = yield oneEvent(el, 'closeButtonPressed');
        expect(response).to.exist;
    }));
    it('shows the processing indicator if configured to', () => __awaiter(void 0, void 0, void 0, function* () {
        var _g, _h;
        const config = new ModalConfig();
        config.showProcessingIndicator = true;
        const el = yield fixture(html `
      <modal-template .config=${config}></modal-template>
    `);
        const processingLogo = (_g = el.shadowRoot) === null || _g === void 0 ? void 0 : _g.querySelector('.processing-logo');
        const classList = (_h = processingLogo === null || processingLogo === void 0 ? void 0 : processingLogo.classList) !== null && _h !== void 0 ? _h : [];
        expect('hidden' in classList).to.equal(false);
    }));
    it('shows the close button if configured to', () => __awaiter(void 0, void 0, void 0, function* () {
        var _j;
        const config = new ModalConfig();
        config.showCloseButton = true;
        const el = yield fixture(html `
      <modal-template .config=${config}></modal-template>
    `);
        const closeButton = (_j = el.shadowRoot) === null || _j === void 0 ? void 0 : _j.querySelector('.close-button');
        expect(closeButton).to.exist;
    }));
    it('hides the close button if configured to', () => __awaiter(void 0, void 0, void 0, function* () {
        var _k;
        const config = new ModalConfig();
        config.showCloseButton = false;
        const el = yield fixture(html `
      <modal-template .config=${config}></modal-template>
    `);
        const closeButton = (_k = el.shadowRoot) === null || _k === void 0 ? void 0 : _k.querySelector('.close-button');
        expect(closeButton).to.not.exist;
    }));
    it('shows the properties from the config', () => __awaiter(void 0, void 0, void 0, function* () {
        var _l, _m, _o, _p;
        const config = new ModalConfig();
        config.title = html `Boop`;
        config.subtitle = html `Bop`;
        config.headline = html `Foo`;
        config.message = html `Bar`;
        const el = yield fixture(html `
      <modal-template .config=${config}></modal-template>
    `);
        const title = (_l = el.shadowRoot) === null || _l === void 0 ? void 0 : _l.querySelector('h1');
        const subtitle = (_m = el.shadowRoot) === null || _m === void 0 ? void 0 : _m.querySelector('h2');
        const headline = (_o = el.shadowRoot) === null || _o === void 0 ? void 0 : _o.querySelector('.headline');
        const message = (_p = el.shadowRoot) === null || _p === void 0 ? void 0 : _p.querySelector('.message');
        expect(title).to.exist;
        expect(title === null || title === void 0 ? void 0 : title.innerText).to.equal('Boop');
        expect(subtitle).to.exist;
        expect(subtitle === null || subtitle === void 0 ? void 0 : subtitle.innerText).to.equal('Bop');
        expect(headline).to.exist;
        expect(headline === null || headline === void 0 ? void 0 : headline.textContent).to.equal('Foo');
        expect(message).to.exist;
        expect(message === null || message === void 0 ? void 0 : message.textContent).to.equal('Bar');
    }));
});
//# sourceMappingURL=modal-template.test.js.map