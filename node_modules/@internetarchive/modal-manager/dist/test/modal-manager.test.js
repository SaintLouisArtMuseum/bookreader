import { __awaiter } from "tslib";
import { fixture, expect, oneEvent, elementUpdated } from '@open-wc/testing';
import { html } from 'lit';
import '../src/modal-manager';
import { ModalConfig } from '../src/modal-config';
import { ModalManagerMode } from '../src/modal-manager-mode';
describe('Modal Manager', () => {
    it('defaults to closed', () => __awaiter(void 0, void 0, void 0, function* () {
        const el = (yield fixture(html `
      <modal-manager></modal-manager>
    `));
        expect(el.mode).to.equal('closed');
    }));
    it('can be closed by calling closeModal', () => __awaiter(void 0, void 0, void 0, function* () {
        const el = (yield fixture(html `
      <modal-manager .mode=${ModalManagerMode.Open}></modal-manager>
    `));
        el.closeModal();
        yield elementUpdated(el);
        expect(el.mode).to.equal('closed');
    }));
    it('can be closed by clicking on the backdrop', () => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const el = (yield fixture(html `
      <modal-manager .mode=${ModalManagerMode.Open}></modal-manager>
    `));
        const backdrop = (_a = el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('.backdrop');
        const clickEvent = new MouseEvent('click');
        backdrop === null || backdrop === void 0 ? void 0 : backdrop.dispatchEvent(clickEvent);
        yield elementUpdated(el);
        expect(el.mode).to.equal('closed');
    }));
    it('emits a modeChanged event when opening', () => __awaiter(void 0, void 0, void 0, function* () {
        const el = (yield fixture(html `
      <modal-manager></modal-manager>
    `));
        const config = new ModalConfig();
        setTimeout(() => {
            el.showModal({ config });
        });
        const response = yield oneEvent(el, 'modeChanged');
        expect(response.detail.mode).to.equal(ModalManagerMode.Open);
    }));
    it('emits a modeChanged event when closing', () => __awaiter(void 0, void 0, void 0, function* () {
        const el = (yield fixture(html `
      <modal-manager></modal-manager>
    `));
        const config = new ModalConfig();
        el.showModal({ config });
        yield elementUpdated(el);
        setTimeout(() => {
            el.closeModal();
        });
        const response = yield oneEvent(el, 'modeChanged');
        expect(response.detail.mode).to.equal(ModalManagerMode.Closed);
    }));
    it('can show a modal', () => __awaiter(void 0, void 0, void 0, function* () {
        const el = (yield fixture(html `
      <modal-manager></modal-manager>
    `));
        const config = new ModalConfig();
        el.showModal({ config });
        yield elementUpdated(el);
        expect(el.mode).to.equal(ModalManagerMode.Open);
    }));
    it('sets the --containerHeight CSS property when the window resizes', () => __awaiter(void 0, void 0, void 0, function* () {
        const el = (yield fixture(html `
      <modal-manager></modal-manager>
    `));
        const config = new ModalConfig();
        el.showModal({ config });
        yield elementUpdated(el);
        const event = new Event('resize');
        const propBefore = el.style.getPropertyValue('--containerHeight');
        expect(propBefore).to.equal('');
        window.dispatchEvent(event);
        yield elementUpdated(el);
        const propAfter = el.style.getPropertyValue('--containerHeight');
        expect(propAfter).to.not.equal('');
    }));
    it('calls the userClosedModalCallback when the user taps the backdrop', () => __awaiter(void 0, void 0, void 0, function* () {
        var _b;
        const el = (yield fixture(html `
      <modal-manager></modal-manager>
    `));
        const config = new ModalConfig();
        let callbackCalled = false;
        const callback = () => {
            callbackCalled = true;
        };
        el.showModal({
            config,
            userClosedModalCallback: callback,
        });
        yield elementUpdated(el);
        const backdrop = (_b = el.shadowRoot) === null || _b === void 0 ? void 0 : _b.querySelector('.backdrop');
        const clickEvent = new MouseEvent('click');
        backdrop === null || backdrop === void 0 ? void 0 : backdrop.dispatchEvent(clickEvent);
        yield elementUpdated(el);
        expect(callbackCalled).to.equal(true);
    }));
    it('does not call the userClosedModalCallback when the modal just closes', () => __awaiter(void 0, void 0, void 0, function* () {
        const el = (yield fixture(html `
      <modal-manager></modal-manager>
    `));
        const config = new ModalConfig();
        let callbackCalled = false;
        const callback = () => {
            callbackCalled = true;
        };
        el.showModal({
            config,
            userClosedModalCallback: callback,
        });
        yield elementUpdated(el);
        el.closeModal();
        yield elementUpdated(el);
        expect(callbackCalled).to.equal(false);
    }));
    it('calls the userClosedModalCallback when the user taps the backdrop', () => __awaiter(void 0, void 0, void 0, function* () {
        var _c, _d;
        const el = (yield fixture(html `
      <modal-manager></modal-manager>
    `));
        const config = new ModalConfig();
        let callbackCalled = false;
        const callback = () => {
            callbackCalled = true;
        };
        el.showModal({
            config,
            userClosedModalCallback: callback,
        });
        yield elementUpdated(el);
        const modal = (_c = el.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelector('modal-template');
        const closeButton = (_d = modal === null || modal === void 0 ? void 0 : modal.shadowRoot) === null || _d === void 0 ? void 0 : _d.querySelector('.close-button');
        const clickEvent = new MouseEvent('click');
        closeButton === null || closeButton === void 0 ? void 0 : closeButton.dispatchEvent(clickEvent);
        yield elementUpdated(el);
        expect(callbackCalled).to.equal(true);
    }));
    it('mode is set to closed when close button is pressed', () => __awaiter(void 0, void 0, void 0, function* () {
        var _e, _f;
        const el = (yield fixture(html `
      <modal-manager></modal-manager>
    `));
        const config = new ModalConfig();
        el.showModal({ config });
        yield elementUpdated(el);
        expect(el.mode).to.equal('open');
        const modal = (_e = el.shadowRoot) === null || _e === void 0 ? void 0 : _e.querySelector('modal-template');
        const closeButton = (_f = modal === null || modal === void 0 ? void 0 : modal.shadowRoot) === null || _f === void 0 ? void 0 : _f.querySelector('.close-button');
        const clickEvent = new MouseEvent('click');
        closeButton === null || closeButton === void 0 ? void 0 : closeButton.dispatchEvent(clickEvent);
        yield elementUpdated(el);
        expect(el.mode).to.equal('closed');
    }));
    it('allows the user to close by clicking on the backdrop if configured to', () => __awaiter(void 0, void 0, void 0, function* () {
        var _g;
        const el = (yield fixture(html `
      <modal-manager></modal-manager>
    `));
        const config = new ModalConfig();
        config.closeOnBackdropClick = true;
        el.showModal({ config });
        yield elementUpdated(el);
        const backdrop = (_g = el.shadowRoot) === null || _g === void 0 ? void 0 : _g.querySelector('.backdrop');
        const clickEvent = new MouseEvent('click');
        backdrop === null || backdrop === void 0 ? void 0 : backdrop.dispatchEvent(clickEvent);
        yield elementUpdated(el);
        expect(el.mode).to.equal('closed');
    }));
    it("dont't allow the user to close by clicking on the backdrop if configured to", () => __awaiter(void 0, void 0, void 0, function* () {
        var _h;
        const el = (yield fixture(html `
      <modal-manager></modal-manager>
    `));
        const config = new ModalConfig();
        config.closeOnBackdropClick = false;
        el.showModal({ config });
        yield elementUpdated(el);
        const backdrop = (_h = el.shadowRoot) === null || _h === void 0 ? void 0 : _h.querySelector('.backdrop');
        const clickEvent = new MouseEvent('click');
        backdrop === null || backdrop === void 0 ? void 0 : backdrop.dispatchEvent(clickEvent);
        yield elementUpdated(el);
        expect(el.getMode()).to.equal('open');
    }));
    it('ia logo should not visible on modal', () => __awaiter(void 0, void 0, void 0, function* () {
        var _j;
        const el = (yield fixture(html `
      <modal-manager></modal-manager>
    `));
        const config = new ModalConfig();
        config.showHeaderLogo = false;
        el.showModal({ config });
        yield elementUpdated(el);
        const logoIcon = (_j = el.shadowRoot) === null || _j === void 0 ? void 0 : _j.querySelector('.logo-icon');
        expect(logoIcon).to.not.exist;
    }));
});
//# sourceMappingURL=modal-manager.test.js.map