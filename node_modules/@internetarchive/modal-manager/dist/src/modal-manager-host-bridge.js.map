{"version":3,"file":"modal-manager-host-bridge.js","sourceRoot":"","sources":["../../src/modal-manager-host-bridge.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAI7C,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AAExD;;;;;;;;;;;;;GAaG;AACH,MAAM,OAAO,sBAAsB;IAGjC,YAAY,YAAmC;QAuBvC,0BAAqB,GAAyB,QAAQ,CAC5D,GAAG,EACH,IAAI,CAAC,0BAA0B,EAC/B,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,CACxC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QA1BX,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAED;;;;;OAKG;IACH,gBAAgB,CAAC,IAAsB;QACrC,QAAQ,IAAI,EAAE;YACZ,KAAK,gBAAgB,CAAC,IAAI;gBACxB,IAAI,CAAC,mBAAmB,EAAE,CAAC;gBAC3B,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,MAAM;YACR,KAAK,gBAAgB,CAAC,MAAM;gBAC1B,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC1B,IAAI,CAAC,oBAAoB,EAAE,CAAC;gBAC5B,MAAM;SACT;IACH,CAAC;IAQD,yFAAyF;IACzF,mGAAmG;IACnG,mGAAmG;IACnG,kBAAkB;IAClB,0FAA0F;IAC1F,qFAAqF;IACrF,yCAAyC;IACjC,0BAA0B;QAChC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,WAAW,CACjC,mBAAmB,EACnB,GAAG,MAAM,CAAC,WAAW,IAAI,CAC1B,CAAC;IACJ,CAAC;IAEO,kBAAkB;QACxB,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;IACpD,CAAC;IAEO,oBAAoB;QAC1B,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;IACvD,CAAC;IAEO,mBAAmB;QACzB,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;IAChE,CAAC;IAEO,kBAAkB;QACxB,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACnE,CAAC;CACF","sourcesContent":["import { throttle } from 'throttle-debounce';\n\nimport { ModalManagerHostBridgeInterface } from './modal-manager-host-bridge-interface';\nimport { ModalManagerInterface } from './modal-manager-interface';\nimport { ModalManagerMode } from './modal-manager-mode';\n\n/**\n * The `ModalManagerHostBridge` is a bridge between the `ModalManager` and the\n * host that sets up environment-specific changes when the modal opens and closes.\n *\n * For instance, when the modal opens, this adds a class to the `<body>` tag for styling\n * and adds a `resize` listener to fix a Safari shadow root issue.\n *\n * Consumers can create their own `ModalManagerHostBridgeInterface` classes and pass\n * them into the `ModalManager` if this one does not work for their environment.\n *\n * @export\n * @class ModalManagerHostBridge\n * @implements {ModalManagerHostBridgeInterface}\n */\nexport class ModalManagerHostBridge implements ModalManagerHostBridgeInterface {\n  private modalManager: ModalManagerInterface;\n\n  constructor(modalManager: ModalManagerInterface) {\n    this.modalManager = modalManager;\n  }\n\n  /**\n   * Handle the mode change\n   *\n   * @private\n   * @memberof ModalManager\n   */\n  handleModeChange(mode: ModalManagerMode): void {\n    switch (mode) {\n      case ModalManagerMode.Open:\n        this.startResizeListener();\n        this.stopDocumentScroll();\n        break;\n      case ModalManagerMode.Closed:\n        this.stopResizeListener();\n        this.resumeDocumentScroll();\n        break;\n    }\n  }\n\n  private windowResizeThrottler: throttle<() => void> = throttle(\n    100,\n    this.updateModalContainerHeight,\n    { noLeading: false, noTrailing: false }\n  ).bind(this);\n\n  // This is a workaround for Safari. Safari does not update shadowRoot elements calculated\n  // based on the viewport size (ie. `calc(100vh - 10px)`). It does an initial calculation correctly,\n  // but resizing the window does not cause the calculation to update. Firefox and Chrome both handle\n  // this correctly.\n  // It doesn't matter what css variable you set, it is just forcing Safari to do an update.\n  // Also note that the value has to change on each update for Safari to do the update,\n  // ie. you can't just set a static value.\n  private updateModalContainerHeight(): void {\n    this.modalManager.style.setProperty(\n      '--containerHeight',\n      `${window.innerHeight}px`\n    );\n  }\n\n  private stopDocumentScroll(): void {\n    document.body.classList.add('modal-manager-open');\n  }\n\n  private resumeDocumentScroll(): void {\n    document.body.classList.remove('modal-manager-open');\n  }\n\n  private startResizeListener(): void {\n    window.addEventListener('resize', this.windowResizeThrottler);\n  }\n\n  private stopResizeListener(): void {\n    window.removeEventListener('resize', this.windowResizeThrottler);\n  }\n}\n"]}