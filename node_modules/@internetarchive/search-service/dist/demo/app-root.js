import { __decorate } from "tslib";
import { css, customElement, html, internalProperty, LitElement, query, } from 'lit-element';
import { unsafeHTML } from 'lit-html/directives/unsafe-html';
import { nothing } from 'lit-html';
import { SearchParams } from '../src/search-params';
import { SearchService } from '../src/search-service';
let AppRoot = class AppRoot extends LitElement {
    constructor() {
        super(...arguments);
        this.searchService = SearchService.default;
    }
    get searchResults() {
        var _a;
        return (_a = this.searchResponse) === null || _a === void 0 ? void 0 : _a.response.docs;
    }
    /** @inheritdoc */
    render() {
        return html `
      <fieldset>
        <legend>Search</legend>
        <form>
          <label>Search</label>
          <input type="text" id="search-input" placeholder="Search Term" />
          <input type="submit" value="Search" @click=${this.search} />
        </form>
        <form>
          <label>Metadata</label>
          <input type="text" id="metadata-input" placeholder="Identifier" />
          <input
            type="submit"
            value="Get Metadata"
            @click=${this.getMetadata}
          />
        </form>
      </fieldset>

      ${this.searchResults ? this.resultsTemplate : nothing}
      ${this.metadataResponse ? this.metadataTemplate : nothing}
    `;
    }
    get resultsTemplate() {
        var _a;
        return html `
      <h2>Search Results</h2>
      <table>
        <thead>
          <tr>
            <th>Identifier</th>
            <th>Title</th>
          </tr>
        </thead>
        <tbody>
          ${(_a = this.searchResults) === null || _a === void 0 ? void 0 : _a.map(metadata => {
            var _a;
            return html `
              <tr>
                <td>${metadata.identifier}</td>
                <td>${(_a = metadata.title) === null || _a === void 0 ? void 0 : _a.value}</td>
              </tr>
            `;
        })}
        </tbody>
      </table>
    `;
    }
    get metadataTemplate() {
        var _a;
        const rawMetadata = (_a = this.metadataResponse) === null || _a === void 0 ? void 0 : _a.metadata.rawMetadata;
        if (!rawMetadata)
            return html `${nothing}`;
        return html `
      <h2>Metadata Response</h2>
      <table>
        ${Object.keys(rawMetadata).map(key => html `
            <tr>
              <td>${key}</td>
              <td>${unsafeHTML(rawMetadata[key])}</td>
            </tr>
          `)}
      </table>
    `;
    }
    async getMetadata(e) {
        e.preventDefault();
        const identifier = this.metadataInput.value;
        const result = await this.searchService.fetchMetadata(identifier);
        this.metadataResponse = result === null || result === void 0 ? void 0 : result.success;
    }
    async search(e) {
        var _a;
        e.preventDefault();
        const term = this.searchInput.value;
        const searchParams = new SearchParams({
            query: term,
            rows: 10,
            fields: ['identifier', 'title'],
        });
        const result = await this.searchService.search(searchParams);
        if (result === null || result === void 0 ? void 0 : result.success) {
            this.searchResponse = result === null || result === void 0 ? void 0 : result.success;
        }
        else {
            alert(`Oh noes: ${(_a = result === null || result === void 0 ? void 0 : result.error) === null || _a === void 0 ? void 0 : _a.message}`);
            console.error('Error searching', result === null || result === void 0 ? void 0 : result.error);
        }
    }
    static get styles() {
        return css `
      /* th {
        font-weight: bold;
      } */
    `;
    }
};
__decorate([
    query('#search-input')
], AppRoot.prototype, "searchInput", void 0);
__decorate([
    query('#metadata-input')
], AppRoot.prototype, "metadataInput", void 0);
__decorate([
    internalProperty()
], AppRoot.prototype, "searchResponse", void 0);
__decorate([
    internalProperty()
], AppRoot.prototype, "metadataResponse", void 0);
AppRoot = __decorate([
    customElement('app-root')
], AppRoot);
export { AppRoot };
//# sourceMappingURL=app-root.js.map