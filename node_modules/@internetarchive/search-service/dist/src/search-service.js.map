{"version":3,"file":"search-service.js","sourceRoot":"","sources":["../../src/search-service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AAEpE,OAAO,EAAE,gBAAgB,EAAE,MAAM,wCAAwC,CAAC;AAC1E,OAAO,EAAE,oBAAoB,EAAE,MAAM,yCAAyC,CAAC;AAC/E,OAAO,EACL,kBAAkB,EAClB,sBAAsB,GACvB,MAAM,wBAAwB,CAAC;AAKhC;;;;GAIG;AACH,MAAM,OAAO,aAAa;IAOxB,YAAY,aAAqC;QAC/C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;IAED,kBAAkB;IAClB,KAAK,CAAC,MAAM,CACV,MAAoB;QAEpB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACnE,IAAI,WAAW,CAAC,KAAK,EAAE;YACrB,OAAO,WAAW,CAAC;SACpB;QAED,MAAM,eAAe,GAAG,IAAI,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAChE,OAAO,EAAE,OAAO,EAAE,eAAe,EAAE,CAAC;IACtC,CAAC;IAED,kBAAkB;IAClB,KAAK,CAAC,aAAa,CACjB,UAAkB;;QAElB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACvE,IAAI,WAAW,CAAC,KAAK,EAAE;YACrB,OAAO,WAAW,CAAC;SACpB;QAED,IAAI,CAAA,MAAA,WAAW,CAAC,OAAO,0CAAE,QAAQ,MAAK,SAAS,EAAE;YAC/C,OAAO;gBACL,KAAK,EAAE,IAAI,kBAAkB,CAAC,sBAAsB,CAAC,YAAY,CAAC;aACnE,CAAC;SACH;QAED,MAAM,eAAe,GAAG,IAAI,gBAAgB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAClE,OAAO,EAAE,OAAO,EAAE,eAAe,EAAE,CAAC;IACtC,CAAC;;AAxCa,qBAAO,GAA2B,IAAI,aAAa,CAC/D,IAAI,oBAAoB,EAAE,CAC3B,CAAC","sourcesContent":["import { SearchResponse } from './responses/search/search-response';\nimport { SearchParams } from './search-params';\nimport { MetadataResponse } from './responses/metadata/metadata-response';\nimport { DefaultSearchBackend } from './search-backend/default-search-backend';\nimport {\n  SearchServiceError,\n  SearchServiceErrorType,\n} from './search-service-error';\nimport { SearchServiceInterface } from './search-service-interface';\nimport { SearchBackendInterface } from './search-backend/search-backend-interface';\nimport { Result } from '@internetarchive/result-type';\n\n/**\n * The Search Service is responsible for taking the raw response provided by\n * the Search Backend and modeling it as a `SearchResponse` or `MetadataResponse`\n * object, depending on the type of response.\n */\nexport class SearchService implements SearchServiceInterface {\n  public static default: SearchServiceInterface = new SearchService(\n    new DefaultSearchBackend()\n  );\n\n  private searchBackend: SearchBackendInterface;\n\n  constructor(searchBackend: SearchBackendInterface) {\n    this.searchBackend = searchBackend;\n  }\n\n  /** @inheritdoc */\n  async search(\n    params: SearchParams\n  ): Promise<Result<SearchResponse, SearchServiceError>> {\n    const rawResponse = await this.searchBackend.performSearch(params);\n    if (rawResponse.error) {\n      return rawResponse;\n    }\n\n    const modeledResponse = new SearchResponse(rawResponse.success);\n    return { success: modeledResponse };\n  }\n\n  /** @inheritdoc */\n  async fetchMetadata(\n    identifier: string\n  ): Promise<Result<MetadataResponse, SearchServiceError>> {\n    const rawResponse = await this.searchBackend.fetchMetadata(identifier);\n    if (rawResponse.error) {\n      return rawResponse;\n    }\n\n    if (rawResponse.success?.metadata === undefined) {\n      return {\n        error: new SearchServiceError(SearchServiceErrorType.itemNotFound),\n      };\n    }\n\n    const modeledResponse = new MetadataResponse(rawResponse.success);\n    return { success: modeledResponse };\n  }\n}\n"]}