{"version":3,"file":"default-search-backend.js","sourceRoot":"","sources":["../../../src/search-backend/default-search-backend.ts"],"names":[],"mappings":"AAIA,OAAO,EACL,kBAAkB,EAClB,sBAAsB,GACvB,MAAM,yBAAyB,CAAC;AAEjC;;GAEG;AACH,MAAM,OAAO,oBAAoB;IAG/B,YAAY,OAAO,GAAG,aAAa;QACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,MAAoB;QAEpB,MAAM,cAAc,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAChD,MAAM,aAAa,GAAG,cAAc,CAAC,QAAQ,EAAE,CAAC;QAChD,MAAM,GAAG,GAAG,WAAW,IAAI,CAAC,OAAO,uBAAuB,aAAa,EAAE,CAAC;QAC1E,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,UAAkB;QAElB,MAAM,GAAG,GAAG,WAAW,IAAI,CAAC,OAAO,aAAa,UAAU,EAAE,CAAC;QAC7D,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAEO,KAAK,CAAC,QAAQ,CACpB,GAAW;QAEX,IAAI,QAAkB,CAAC;QACvB,4DAA4D;QAC5D,IAAI;YACF,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;SAC7B;QAAC,OAAO,GAAG,EAAE;YACZ,MAAM,OAAO,GAAG,GAAG,YAAY,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;YACzD,OAAO,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;SAC1E;QAED,gEAAgE;QAChE,IAAI;YACF,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YACnC,gEAAgE;YAChE,qEAAqE;YACrE,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;YAC5B,IAAI,KAAK,EAAE;gBACT,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;gBACpC,OAAO,IAAI,CAAC,cAAc,CACxB,sBAAsB,CAAC,iBAAiB,EACxC,KAAK,EACL,SAAS,CACV,CAAC;aACH;iBAAM;gBACL,UAAU;gBACV,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;aAC1B;SACF;QAAC,OAAO,GAAG,EAAE;YACZ,MAAM,OAAO,GAAG,GAAG,YAAY,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;YACzD,OAAO,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;SAC3E;IACH,CAAC;IAEO,cAAc,CACpB,SAAiC,EACjC,OAAgB,EAChB,OAAa;QAEb,MAAM,KAAK,GAAG,IAAI,kBAAkB,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QAClE,MAAM,MAAM,GAAG,EAAE,KAAK,EAAE,CAAC;QACzB,OAAO,MAAM,CAAC;IAChB,CAAC;CACF","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { SearchBackendInterface } from './search-backend-interface';\nimport { SearchParams } from '../search-params';\nimport { Result } from '@internetarchive/result-type';\nimport {\n  SearchServiceError,\n  SearchServiceErrorType,\n} from '../search-service-error';\n\n/**\n * The DefaultSearchBackend performs a `window.fetch` request to archive.org\n */\nexport class DefaultSearchBackend implements SearchBackendInterface {\n  private baseUrl: string;\n\n  constructor(baseUrl = 'archive.org') {\n    this.baseUrl = baseUrl;\n  }\n\n  async performSearch(\n    params: SearchParams\n  ): Promise<Result<any, SearchServiceError>> {\n    const urlSearchParam = params.asUrlSearchParams;\n    const queryAsString = urlSearchParam.toString();\n    const url = `https://${this.baseUrl}/advancedsearch.php?${queryAsString}`;\n    return this.fetchUrl(url);\n  }\n\n  async fetchMetadata(\n    identifier: string\n  ): Promise<Result<any, SearchServiceError>> {\n    const url = `https://${this.baseUrl}/metadata/${identifier}`;\n    return this.fetchUrl(url);\n  }\n\n  private async fetchUrl(\n    url: string\n  ): Promise<Result<any, SearchServiceError>> {\n    let response: Response;\n    // first try the fetch and return a networkError if it fails\n    try {\n      response = await fetch(url);\n    } catch (err) {\n      const message = err instanceof Error ? err.message : err;\n      return this.getErrorResult(SearchServiceErrorType.networkError, message);\n    }\n\n    // then try json decoding and return a decodingError if it fails\n    try {\n      const json = await response.json();\n      // the advanced search endpoint doesn't return an HTTP Error 400\n      // and instead returns an HTTP 200 with an `error` key in the payload\n      const error = json['error'];\n      if (error) {\n        const forensics = json['forensics'];\n        return this.getErrorResult(\n          SearchServiceErrorType.searchEngineError,\n          error,\n          forensics\n        );\n      } else {\n        // success\n        return { success: json };\n      }\n    } catch (err) {\n      const message = err instanceof Error ? err.message : err;\n      return this.getErrorResult(SearchServiceErrorType.decodingError, message);\n    }\n  }\n\n  private getErrorResult(\n    errorType: SearchServiceErrorType,\n    message?: string,\n    details?: any\n  ): Result<any, SearchServiceError> {\n    const error = new SearchServiceError(errorType, message, details);\n    const result = { error };\n    return result;\n  }\n}\n"]}