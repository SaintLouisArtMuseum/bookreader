export interface AggregateSearchParam {
    field: string;
    size: number;
}
export declare class AggregateSearchParams {
    searchParams: AggregateSearchParam[];
    constructor(searchParams: AggregateSearchParam[]);
    /**
     * Generates a query parameter from the given aggregate search params
     *
     * Example:
     *
     * [
     *  {
     *    "terms": {
     *      "field": "collection",
     *      "size":10
     *    }
     *  },
     *  {
     *    "terms": {
     *      "field": "subjectSorter",
     *      "size": 10
     *    }
     *  }
     * ]
     *
     * @returns {Record<string, AggregateSearchParam>[]}
     * @memberof AggregateSearchParams
     */
    get asSearchParams(): Record<string, AggregateSearchParam>[];
}
export declare enum SortDirection {
    Asc = "asc",
    Desc = "desc"
}
export declare class SortParam {
    field: string;
    direction: SortDirection;
    constructor(field: string, direction: SortDirection);
    get asString(): string;
}
/**
 * SearchParams provides an encapsulation to all of the search parameters
 * available for searching.
 *
 * It also provides an `asUrlSearchParams` method for converting the
 * parameters to an IA-style query string. ie. it converts the `fields` array
 * to `fl=identifier,collection` and `sort` to `sort=date+desc,downloads+asc`
 */
export declare class SearchParams {
    query: string;
    sort?: SortParam[];
    rows?: number;
    page?: number;
    fields?: string[];
    aggregations?: AggregateSearchParams;
    constructor(options: {
        query: string;
        sort?: SortParam[];
        rows?: number;
        page?: number;
        fields?: string[];
        aggregations?: AggregateSearchParams;
    });
    /**
     * Return a URLSearchParams representation of the parameters for use in network requests.
     *
     * @readonly
     * @type {URLSearchParams}
     * @memberof SearchParams
     */
    get asUrlSearchParams(): URLSearchParams;
}
