export class AggregateSearchParams {
    constructor(searchParams) {
        this.searchParams = searchParams;
    }
    /**
     * Generates a query parameter from the given aggregate search params
     *
     * Example:
     *
     * [
     *  {
     *    "terms": {
     *      "field": "collection",
     *      "size":10
     *    }
     *  },
     *  {
     *    "terms": {
     *      "field": "subjectSorter",
     *      "size": 10
     *    }
     *  }
     * ]
     *
     * @returns {Record<string, AggregateSearchParam>[]}
     * @memberof AggregateSearchParams
     */
    get asSearchParams() {
        return this.searchParams.map(param => {
            return {
                terms: param,
            };
        });
    }
}
export var SortDirection;
(function (SortDirection) {
    SortDirection["Asc"] = "asc";
    SortDirection["Desc"] = "desc";
})(SortDirection || (SortDirection = {}));
export class SortParam {
    constructor(field, direction) {
        this.field = field;
        this.direction = direction;
    }
    get asString() {
        return `${this.field} ${this.direction}`;
    }
}
/**
 * SearchParams provides an encapsulation to all of the search parameters
 * available for searching.
 *
 * It also provides an `asUrlSearchParams` method for converting the
 * parameters to an IA-style query string. ie. it converts the `fields` array
 * to `fl=identifier,collection` and `sort` to `sort=date+desc,downloads+asc`
 */
export class SearchParams {
    constructor(options) {
        this.query = options.query;
        this.sort = options.sort;
        this.rows = options.rows;
        this.page = options.page;
        this.fields = options.fields;
        this.aggregations = options.aggregations;
    }
    /**
     * Return a URLSearchParams representation of the parameters for use in network requests.
     *
     * @readonly
     * @type {URLSearchParams}
     * @memberof SearchParams
     */
    get asUrlSearchParams() {
        const params = new URLSearchParams();
        params.append('q', this.query);
        params.append('output', 'json');
        if (this.rows) {
            params.append('rows', String(this.rows));
        }
        if (this.page) {
            params.append('page', String(this.page));
        }
        if (this.fields) {
            params.append('fl', this.fields.join(','));
        }
        if (this.sort) {
            const sortStrings = this.sort.map(sort => sort.asString);
            params.append('sort', sortStrings.join(','));
        }
        if (this.aggregations) {
            const searchParams = this.aggregations.asSearchParams;
            const stringified = JSON.stringify(searchParams);
            params.append('user_aggs', stringified);
        }
        return params;
    }
}
//# sourceMappingURL=search-params.js.map