import { SearchResponse } from './responses/search/search-response';
import { MetadataResponse } from './responses/metadata/metadata-response';
import { DefaultSearchBackend } from './search-backend/default-search-backend';
import { SearchServiceError, SearchServiceErrorType, } from './search-service-error';
/**
 * The Search Service is responsible for taking the raw response provided by
 * the Search Backend and modeling it as a `SearchResponse` or `MetadataResponse`
 * object, depending on the type of response.
 */
export class SearchService {
    constructor(searchBackend) {
        this.searchBackend = searchBackend;
    }
    /** @inheritdoc */
    async search(params) {
        const rawResponse = await this.searchBackend.performSearch(params);
        if (rawResponse.error) {
            return rawResponse;
        }
        const modeledResponse = new SearchResponse(rawResponse.success);
        return { success: modeledResponse };
    }
    /** @inheritdoc */
    async fetchMetadata(identifier) {
        var _a;
        const rawResponse = await this.searchBackend.fetchMetadata(identifier);
        if (rawResponse.error) {
            return rawResponse;
        }
        if (((_a = rawResponse.success) === null || _a === void 0 ? void 0 : _a.metadata) === undefined) {
            return {
                error: new SearchServiceError(SearchServiceErrorType.itemNotFound),
            };
        }
        const modeledResponse = new MetadataResponse(rawResponse.success);
        return { success: modeledResponse };
    }
}
SearchService.default = new SearchService(new DefaultSearchBackend());
//# sourceMappingURL=search-service.js.map