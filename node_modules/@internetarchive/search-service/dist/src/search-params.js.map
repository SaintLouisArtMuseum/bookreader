{"version":3,"file":"search-params.js","sourceRoot":"","sources":["../../src/search-params.ts"],"names":[],"mappings":"AAKA,MAAM,OAAO,qBAAqB;IAGhC,YAAY,YAAoC;QAC9C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACH,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACnC,OAAO;gBACL,KAAK,EAAE,KAAK;aACb,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAED,MAAM,CAAN,IAAY,aAGX;AAHD,WAAY,aAAa;IACvB,4BAAW,CAAA;IACX,8BAAa,CAAA;AACf,CAAC,EAHW,aAAa,KAAb,aAAa,QAGxB;AAED,MAAM,OAAO,SAAS;IAIpB,YAAY,KAAa,EAAE,SAAwB;QACjD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;IAC3C,CAAC;CACF;AAED;;;;;;;GAOG;AACH,MAAM,OAAO,YAAY;IAavB,YAAY,OAOX;QACC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;IAC3C,CAAC;IAED;;;;;;OAMG;IACH,IAAI,iBAAiB;QACnB,MAAM,MAAM,GAAoB,IAAI,eAAe,EAAE,CAAC;QACtD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/B,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAEhC,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAC1C;QAED,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAC1C;QAED,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SAC5C;QAED,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzD,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SAC9C;QAED,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC;YACtD,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;SACzC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CACF","sourcesContent":["export interface AggregateSearchParam {\n  field: string;\n  size: number;\n}\n\nexport class AggregateSearchParams {\n  searchParams: AggregateSearchParam[];\n\n  constructor(searchParams: AggregateSearchParam[]) {\n    this.searchParams = searchParams;\n  }\n\n  /**\n   * Generates a query parameter from the given aggregate search params\n   *\n   * Example:\n   *\n   * [\n   *  {\n   *    \"terms\": {\n   *      \"field\": \"collection\",\n   *      \"size\":10\n   *    }\n   *  },\n   *  {\n   *    \"terms\": {\n   *      \"field\": \"subjectSorter\",\n   *      \"size\": 10\n   *    }\n   *  }\n   * ]\n   *\n   * @returns {Record<string, AggregateSearchParam>[]}\n   * @memberof AggregateSearchParams\n   */\n  get asSearchParams(): Record<string, AggregateSearchParam>[] {\n    return this.searchParams.map(param => {\n      return {\n        terms: param,\n      };\n    });\n  }\n}\n\nexport enum SortDirection {\n  Asc = 'asc',\n  Desc = 'desc',\n}\n\nexport class SortParam {\n  field: string;\n  direction: SortDirection;\n\n  constructor(field: string, direction: SortDirection) {\n    this.field = field;\n    this.direction = direction;\n  }\n\n  get asString(): string {\n    return `${this.field} ${this.direction}`;\n  }\n}\n\n/**\n * SearchParams provides an encapsulation to all of the search parameters\n * available for searching.\n *\n * It also provides an `asUrlSearchParams` method for converting the\n * parameters to an IA-style query string. ie. it converts the `fields` array\n * to `fl=identifier,collection` and `sort` to `sort=date+desc,downloads+asc`\n */\nexport class SearchParams {\n  query: string;\n\n  sort?: SortParam[];\n\n  rows?: number;\n\n  page?: number;\n\n  fields?: string[];\n\n  aggregations?: AggregateSearchParams;\n\n  constructor(options: {\n    query: string;\n    sort?: SortParam[];\n    rows?: number;\n    page?: number;\n    fields?: string[];\n    aggregations?: AggregateSearchParams;\n  }) {\n    this.query = options.query;\n    this.sort = options.sort;\n    this.rows = options.rows;\n    this.page = options.page;\n    this.fields = options.fields;\n    this.aggregations = options.aggregations;\n  }\n\n  /**\n   * Return a URLSearchParams representation of the parameters for use in network requests.\n   *\n   * @readonly\n   * @type {URLSearchParams}\n   * @memberof SearchParams\n   */\n  get asUrlSearchParams(): URLSearchParams {\n    const params: URLSearchParams = new URLSearchParams();\n    params.append('q', this.query);\n    params.append('output', 'json');\n\n    if (this.rows) {\n      params.append('rows', String(this.rows));\n    }\n\n    if (this.page) {\n      params.append('page', String(this.page));\n    }\n\n    if (this.fields) {\n      params.append('fl', this.fields.join(','));\n    }\n\n    if (this.sort) {\n      const sortStrings = this.sort.map(sort => sort.asString);\n      params.append('sort', sortStrings.join(','));\n    }\n\n    if (this.aggregations) {\n      const searchParams = this.aggregations.asSearchParams;\n      const stringified = JSON.stringify(searchParams);\n      params.append('user_aggs', stringified);\n    }\n\n    return params;\n  }\n}\n"]}