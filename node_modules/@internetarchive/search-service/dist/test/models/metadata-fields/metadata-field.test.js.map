{"version":3,"file":"metadata-field.test.js","sourceRoot":"","sources":["../../../../test/models/metadata-fields/metadata-field.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  FieldParserInterface,\n  FieldParserRawValue,\n} from '@internetarchive/field-parsers/dist/src/field-parser-interface';\nimport { expect } from '@open-wc/testing';\nimport { MetadataField } from '../../../src/models/metadata-fields/metadata-field';\n\ndescribe('Metadata Field', () => {\n  it('can be properly instantiated with single value', () => {\n    class MockParser implements FieldParserInterface<string> {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseValue(rawValue: any): string {\n        return rawValue;\n      }\n    }\n\n    const parser = new MockParser();\n    const metadataField = new MetadataField(parser, 'foo');\n\n    expect(metadataField.rawValue).to.equal('foo');\n    expect(metadataField.value).to.equal('foo');\n    expect(metadataField.values).to.deep.equal(['foo']);\n  });\n\n  it('can be properly instantiated with array value', () => {\n    class MockParser implements FieldParserInterface<string> {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseValue(rawValue: any): string {\n        return rawValue;\n      }\n    }\n\n    const parser = new MockParser();\n    const metadataField = new MetadataField(parser, ['foo', 'bar', 'baz']);\n\n    expect(metadataField.rawValue).to.deep.equal(['foo', 'bar', 'baz']);\n    expect(metadataField.value).to.equal('foo');\n    expect(metadataField.values).to.deep.equal(['foo', 'bar', 'baz']);\n  });\n\n  it('properly casts values to expected parser type for single values', () => {\n    class MockFloatParser implements FieldParserInterface<number> {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseValue(rawValue: any): number {\n        return parseFloat(rawValue);\n      }\n    }\n\n    const parser = new MockFloatParser();\n    const metadataField = new MetadataField(parser, '1.3');\n\n    expect(metadataField.rawValue).to.equal('1.3');\n    expect(metadataField.value).to.equal(1.3);\n    expect(metadataField.values).to.deep.equal([1.3]);\n  });\n\n  it('properly casts values to expected parser type for array values', () => {\n    class MockFloatParser implements FieldParserInterface<number> {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseValue(rawValue: any): number {\n        return parseFloat(rawValue);\n      }\n    }\n\n    const parser = new MockFloatParser();\n    const metadataField = new MetadataField(parser, ['1.3', '2.4', '4.5']);\n\n    expect(metadataField.rawValue).to.deep.equal(['1.3', '2.4', '4.5']);\n    expect(metadataField.value).to.equal(1.3);\n    expect(metadataField.values).to.deep.equal([1.3, 2.4, 4.5]);\n  });\n\n  it('has no value if a raw value was not passed in', () => {\n    class MockFloatParser implements FieldParserInterface<number> {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseValue(rawValue: any): number {\n        return rawValue;\n      }\n    }\n\n    const parser = new MockFloatParser();\n    const metadataField = new MetadataField(parser);\n\n    expect(metadataField.rawValue).to.equal(undefined);\n    expect(metadataField.value).to.equal(undefined);\n    expect(metadataField.values).to.deep.equal([]);\n  });\n\n  it('does not add value to values array if parsed value is undefined', () => {\n    class MockFloatParser implements FieldParserInterface<number> {\n      parseValue(rawValue: FieldParserRawValue): number | undefined {\n        return undefined;\n      }\n    }\n\n    const parser = new MockFloatParser();\n    const metadataField = new MetadataField(parser);\n\n    expect(metadataField.rawValue).to.equal(undefined);\n    expect(metadataField.value).to.equal(undefined);\n    expect(metadataField.values).to.deep.equal([]);\n  });\n\n  it('handles falsy `0` return values properly', () => {\n    class MockFloatParser implements FieldParserInterface<number> {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseValue(rawValue: any): number {\n        return rawValue;\n      }\n    }\n\n    const parser = new MockFloatParser();\n    const metadataField = new MetadataField(parser, 0);\n\n    expect(metadataField.rawValue).to.equal(0);\n    expect(metadataField.value).to.equal(0);\n    expect(metadataField.values).to.deep.equal([0]);\n  });\n\n  it('handles falsy `false` return values properly', () => {\n    class MockFloatParser implements FieldParserInterface<number> {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseValue(rawValue: any): number {\n        return rawValue;\n      }\n    }\n\n    const parser = new MockFloatParser();\n    const metadataField = new MetadataField(parser, false);\n\n    expect(metadataField.rawValue).to.equal(false);\n    expect(metadataField.value).to.equal(false);\n    expect(metadataField.values).to.deep.equal([false]);\n  });\n\n  it('handles falsy empty string return values properly', () => {\n    class MockFloatParser implements FieldParserInterface<number> {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseValue(rawValue: any): number {\n        return rawValue;\n      }\n    }\n\n    const parser = new MockFloatParser();\n    const metadataField = new MetadataField(parser, '');\n\n    expect(metadataField.rawValue).to.equal('');\n    expect(metadataField.value).to.equal('');\n    expect(metadataField.values).to.deep.equal(['']);\n  });\n});\n"]}