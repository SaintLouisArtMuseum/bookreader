{"version":3,"file":"search-params.test.js","sourceRoot":"","sources":["../../test/search-params.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\n\nimport {\n  AggregateSearchParams,\n  SearchParams,\n  SortDirection,\n  SortParam,\n} from '../src/search-params';\n\ndescribe('SearchParams', () => {\n  it('can be instantiated with just a query', async () => {\n    const query = 'title:foo AND collection:bar';\n    const params = new SearchParams({ query });\n    expect(params.query).to.equal(query);\n  });\n\n  it('can be instantiated with query params and fields', async () => {\n    const query = 'title:foo AND collection:bar';\n    const fields = ['identifier', 'foo', 'bar'];\n    const params = new SearchParams({\n      query,\n      fields,\n    });\n    expect(params.fields).to.deep.equal(fields);\n  });\n\n  it('properly generates a URLSearchParam with just a query', async () => {\n    const query = 'title:foo AND collection:bar';\n    const params = new SearchParams({ query });\n    const urlSearchParam = params.asUrlSearchParams;\n    const queryAsString = urlSearchParam.toString();\n    const expected = 'q=title%3Afoo+AND+collection%3Abar&output=json';\n    expect(queryAsString).to.equal(expected);\n  });\n\n  it('properly generates a URLSearchParam with a query and fields', async () => {\n    const query = 'title:foo AND collection:bar';\n    const fields = ['identifier', 'foo', 'bar'];\n    const params = new SearchParams({\n      query,\n      fields,\n    });\n    const urlSearchParam = params.asUrlSearchParams;\n    const queryAsString = urlSearchParam.toString();\n    const expected =\n      'q=title%3Afoo+AND+collection%3Abar&output=json&fl=identifier%2Cfoo%2Cbar';\n    expect(queryAsString).to.equal(expected);\n  });\n\n  it('properly generates a URLSearchParam with a query, sort, row, start, and fields', async () => {\n    const query = 'title:foo AND collection:bar';\n    const fields = ['identifier', 'foo', 'bar'];\n    const sort = [new SortParam('downloads', SortDirection.Desc)];\n    const params = new SearchParams({\n      query,\n      sort,\n      rows: 53,\n      page: 27,\n      fields,\n    });\n    const urlSearchParam = params.asUrlSearchParams;\n    const queryAsString = urlSearchParam.toString();\n    const expected =\n      'q=title%3Afoo+AND+collection%3Abar&output=json&rows=53&page=27&fl=identifier%2Cfoo%2Cbar&sort=downloads+desc';\n    expect(queryAsString).to.equal(expected);\n  });\n\n  it('properly generates a URLSearchParam multiple sort params', async () => {\n    const query = 'title:foo AND collection:bar';\n    const sort = [\n      new SortParam('downloads', SortDirection.Desc),\n      new SortParam('foo', SortDirection.Asc),\n    ];\n    const params = new SearchParams({\n      query,\n      sort,\n      rows: 53,\n      page: 27,\n    });\n    const urlSearchParam = params.asUrlSearchParams;\n    const queryAsString = urlSearchParam.toString();\n    const expected =\n      'q=title%3Afoo+AND+collection%3Abar&output=json&rows=53&page=27&sort=downloads+desc%2Cfoo+asc';\n    expect(queryAsString).to.equal(expected);\n  });\n\n  it('properly generates a URLSearchParam with aggregations', async () => {\n    const query = 'title:foo AND collection:bar';\n    const aggregations = new AggregateSearchParams([\n      {\n        field: 'foo',\n        size: 10,\n      },\n      {\n        field: 'bar',\n        size: 7,\n      },\n    ]);\n    const params = new SearchParams({\n      query,\n      aggregations,\n    });\n    const urlSearchParam = params.asUrlSearchParams;\n    const queryAsString = urlSearchParam.toString();\n    const expected =\n      'q=title%3Afoo+AND+collection%3Abar&output=json&user_aggs=%5B%7B%22terms%22%3A%7B%22field%22%3A%22foo%22%2C%22size%22%3A10%7D%7D%2C%7B%22terms%22%3A%7B%22field%22%3A%22bar%22%2C%22size%22%3A7%7D%7D%5D';\n    expect(queryAsString).to.equal(expected);\n  });\n});\n"]}