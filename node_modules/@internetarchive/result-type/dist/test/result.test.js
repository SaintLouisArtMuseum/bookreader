import { expect } from '@open-wc/testing';
describe('Result', () => {
    it('can be initialized with a success value', async () => {
        const result = {
            success: 'foo',
        };
        expect(result.success).to.equal('foo');
        expect(result.error).to.equal(undefined);
    });
    it('can be initialized with an error', async () => {
        var _a;
        // eslint-disable-next-line no-shadow
        let FooErrorType;
        (function (FooErrorType) {
            FooErrorType[FooErrorType["networkError"] = 0] = "networkError";
            FooErrorType[FooErrorType["decodingError"] = 1] = "decodingError";
        })(FooErrorType || (FooErrorType = {}));
        class FooError extends Error {
            constructor(type) {
                super();
                this.type = type;
            }
        }
        const result = {
            error: new FooError(FooErrorType.decodingError),
        };
        expect(result.success).to.equal(undefined);
        expect((_a = result.error) === null || _a === void 0 ? void 0 : _a.type).to.equal(FooErrorType.decodingError);
    });
});
//# sourceMappingURL=result.test.js.map