{"version":3,"file":"result.test.js","sourceRoot":"","sources":["../../test/result.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAG1C,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,MAAM,GAA0B;YACpC,OAAO,EAAE,KAAK;SACf,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACvC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;;QAChD,qCAAqC;QACrC,IAAK,YAGJ;QAHD,WAAK,YAAY;YACf,+DAAY,CAAA;YACZ,iEAAa,CAAA;QACf,CAAC,EAHI,YAAY,KAAZ,YAAY,QAGhB;QACD,MAAM,QAAS,SAAQ,KAAK;YAG1B,YAAY,IAAkB;gBAC5B,KAAK,EAAE,CAAC;gBACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACnB,CAAC;SACF;QACD,MAAM,MAAM,GAA6B;YACvC,KAAK,EAAE,IAAI,QAAQ,CAAC,YAAY,CAAC,aAAa,CAAC;SAChD,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC3C,MAAM,CAAC,MAAA,MAAM,CAAC,KAAK,0CAAE,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect } from '@open-wc/testing';\nimport { Result } from '../src/result';\n\ndescribe('Result', () => {\n  it('can be initialized with a success value', async () => {\n    const result: Result<string, Error> = {\n      success: 'foo',\n    };\n    expect(result.success).to.equal('foo');\n    expect(result.error).to.equal(undefined);\n  });\n\n  it('can be initialized with an error', async () => {\n    // eslint-disable-next-line no-shadow\n    enum FooErrorType {\n      networkError,\n      decodingError,\n    }\n    class FooError extends Error {\n      type?: FooErrorType;\n\n      constructor(type: FooErrorType) {\n        super();\n        this.type = type;\n      }\n    }\n    const result: Result<string, FooError> = {\n      error: new FooError(FooErrorType.decodingError),\n    };\n    expect(result.success).to.equal(undefined);\n    expect(result.error?.type).to.equal(FooErrorType.decodingError);\n  });\n});\n"]}