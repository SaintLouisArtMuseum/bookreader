{"version":3,"file":"number.js","sourceRoot":"","sources":["../../../src/field-types/number.ts"],"names":[],"mappings":"AAKA,MAAM,OAAO,YAAY;IAKvB,kBAAkB;IAClB,UAAU,CAAC,QAA6B;QACtC,IAAI,OAAO,QAAQ,KAAK,QAAQ;YAAE,OAAO,QAAQ,CAAC;QAClD,IAAI,OAAO,QAAQ,KAAK,SAAS;YAAE,OAAO,SAAS,CAAC;QAEpD,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;QACnC,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACvB,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,KAAK,CAAC;IACf,CAAC;;AAdD,0DAA0D;AAC1D,6CAA6C;AACtC,mBAAM,GAAG,IAAI,YAAY,EAAE,CAAC","sourcesContent":["import {\n  FieldParserInterface,\n  FieldParserRawValue,\n} from '../field-parser-interface';\n\nexport class NumberParser implements FieldParserInterface<number> {\n  // use a shared static instance for performance instead of\n  // instantiating a new instance for every use\n  static shared = new NumberParser();\n\n  /** @inheritdoc */\n  parseValue(rawValue: FieldParserRawValue): number | undefined {\n    if (typeof rawValue === 'number') return rawValue;\n    if (typeof rawValue === 'boolean') return undefined;\n\n    const value = parseFloat(rawValue);\n    if (Number.isNaN(value)) {\n      return undefined;\n    }\n    return value;\n  }\n}\n"]}