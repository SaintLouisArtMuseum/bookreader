{"version":3,"file":"date.js","sourceRoot":"","sources":["../../../src/field-types/date.ts"],"names":[],"mappings":"AAKA,MAAM,OAAO,UAAU;IAKrB,kBAAkB;IAClB,UAAU,CAAC,QAA6B;QACtC,6BAA6B;QAC7B,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IACvE,CAAC;IAED,0BAA0B;IAClB,gBAAgB,CAAC,QAA6B;QACpD,IAAI,OAAO,QAAQ,KAAK,QAAQ;YAAE,OAAO,SAAS,CAAC;QACnD,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACnD,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YACtC,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC;IAEO,WAAW,CAAC,QAA6B;QAC/C,IAAI,OAAO,QAAQ,KAAK,QAAQ;YAAE,OAAO,SAAS,CAAC;QACnD,IAAI,WAAW,GAAG,QAAQ,CAAC;QAE3B,0FAA0F;QAC1F,IACE,WAAW,CAAC,KAAK,CACf,6DAA6D,CAC9D,EACD;YACA,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SAC7C;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACvC,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;YACxB,OAAO,SAAS,CAAC;SAClB;QACD,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC;QACjC,2FAA2F;QAC3F,+EAA+E;QAC/E,MAAM,gBAAgB,GACpB,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,4BAA4B;YAC7D,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,wCAAwC;YACzE,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,2BAA2B;YAC9D,WAAW,CAAC,KAAK,CAAC,8BAA8B,CAAC,IAAI,oBAAoB;YACzE,WAAW,CAAC,KAAK,CAAC,yBAAyB,CAAC,IAAI,qCAAqC;YACrF,WAAW,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,oCAAoC;QAC3E,IAAI,gBAAgB,EAAE;YACpB,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;SACxE;QACD,OAAO,IAAI,CAAC;IACd,CAAC;;AAnDD,0DAA0D;AAC1D,6CAA6C;AACtC,iBAAM,GAAG,IAAI,UAAU,EAAE,CAAC","sourcesContent":["import {\n  FieldParserInterface,\n  FieldParserRawValue,\n} from '../field-parser-interface';\n\nexport class DateParser implements FieldParserInterface<Date> {\n  // use a shared static instance for performance instead of\n  // instantiating a new instance for every use\n  static shared = new DateParser();\n\n  /** @inheritdoc */\n  parseValue(rawValue: FieldParserRawValue): Date | undefined {\n    // try different date parsing\n    return this.parseJSDate(rawValue) || this.parseBracketDate(rawValue);\n  }\n\n  // handles \"[yyyy]\" format\n  private parseBracketDate(rawValue: FieldParserRawValue): Date | undefined {\n    if (typeof rawValue !== 'string') return undefined;\n    const yearMatch = rawValue.match(/\\[([0-9]{4})\\]/);\n    if (!yearMatch || yearMatch.length < 2) {\n      return undefined;\n    }\n    return this.parseJSDate(yearMatch[1]);\n  }\n\n  private parseJSDate(rawValue: FieldParserRawValue): Date | undefined {\n    if (typeof rawValue !== 'string') return undefined;\n    let parsedValue = rawValue;\n\n    // fix for Safari not supporting `yyyy-mm-dd HH:MM:SS` format, insert a `T` into the space\n    if (\n      parsedValue.match(\n        /^[0-9]{4}-[0-9]{2}-[0-9]{2}\\s{1}[0-9]{2}:[0-9]{2}:[0-9]{2}$/\n      )\n    ) {\n      parsedValue = parsedValue.replace(' ', 'T');\n    }\n\n    const parsed = Date.parse(parsedValue);\n    if (Number.isNaN(parsed)) {\n      return undefined;\n    }\n    let date = new Date(parsedValue);\n    // the `Date(string)` constructor parses some strings as GMT and some in the local timezone\n    // this attempts to detect cases that get parsed as GMT and adjusts accordingly\n    const dateWithTimeZone =\n      parsedValue.indexOf('Z') > -1 || // ISO8601 with GMT timezone\n      parsedValue.indexOf('+') > -1 || // ISO8601 with positive timezone offset\n      parsedValue.match(/^[0-9]{4}$/) || // just the year, ie `2020`\n      parsedValue.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/) || // YYYY-MM-DD format\n      parsedValue.match(/^.*?-[0-9]{2}:[0-9]{2}$/) || // `YYYY-MM-DDTHH:mm:ss-00:00` format\n      parsedValue.match(/^.*?-[0-9]{4}$/); // `YYYY-MM-DDTHH:mm:ss-0000` format\n    if (dateWithTimeZone) {\n      date = new Date(date.getTime() + date.getTimezoneOffset() * 1000 * 60);\n    }\n    return date;\n  }\n}\n"]}