/**
 * Parses duration format to a `Duration` (number of seconds with decimal)
 *
 * Can parse hh:mm:ss.ms, hh:mm:ss, mm:ss, mm:ss.ms, and s.ms formats
 */
export class DurationParser {
    /** @inheritdoc */
    parseValue(rawValue) {
        if (typeof rawValue === 'number')
            return rawValue;
        if (typeof rawValue === 'boolean')
            return undefined;
        const componentArray = rawValue.split(':');
        let seconds;
        // if there are no colons in the string, we can assume it's in sss.ms format so just parse it
        if (componentArray.length === 1) {
            seconds = this.parseNumberFormat(componentArray[0]);
        }
        else {
            seconds = this.parseColonSeparatedFormat(componentArray);
        }
        return seconds;
    }
    /**
     * Parse sss.ms format
     *
     * @param rawValue
     * @returns
     */
    parseNumberFormat(rawValue) {
        let seconds = parseFloat(rawValue);
        if (Number.isNaN(seconds))
            seconds = undefined;
        return seconds;
    }
    /**
     * Parse hh:mm:ss.ms format
     *
     * @param componentArray
     * @returns
     */
    parseColonSeparatedFormat(componentArray) {
        // if any of the hh:mm:ss components are NaN, just return undefined
        let hasNaNComponent = false;
        const parsedValue = componentArray
            .map((element, index) => {
            const componentValue = parseFloat(element);
            if (Number.isNaN(componentValue)) {
                hasNaNComponent = true;
                return 0;
            }
            const exponent = componentArray.length - 1 - index;
            const multiplier = 60 ** exponent;
            return componentValue * Math.floor(multiplier);
        })
            .reduce((a, b) => a + b, 0);
        return hasNaNComponent ? undefined : parsedValue;
    }
}
// use a shared static instance for performance instead of
// instantiating a new instance for every use
DurationParser.shared = new DurationParser();
//# sourceMappingURL=duration.js.map