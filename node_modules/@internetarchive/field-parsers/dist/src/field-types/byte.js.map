{"version":3,"file":"byte.js","sourceRoot":"","sources":["../../../src/field-types/byte.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;AAOxC;;;;;;;GAOG;AACH,MAAM,OAAO,UAAU;IAKrB,kBAAkB;IAClB,UAAU,CAAC,QAA6B;QACtC,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;QACnC,OAAO,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;;AARD,0DAA0D;AAC1D,6CAA6C;AACtC,iBAAM,GAAG,IAAI,UAAU,EAAE,CAAC","sourcesContent":["import {\n  FieldParserInterface,\n  FieldParserRawValue,\n} from '../field-parser-interface';\nimport { NumberParser } from './number';\n\n/**\n * A Byte is a unit-specific `number`, in bytes.\n */\nexport type Byte = number;\n\n/**\n * The ByteParser is a unit-specific NumberParser\n * that returns a value in bytes\n *\n * @export\n * @class ByteParser\n * @implements {FieldParserInterface<Byte>}\n */\nexport class ByteParser implements FieldParserInterface<Byte> {\n  // use a shared static instance for performance instead of\n  // instantiating a new instance for every use\n  static shared = new ByteParser();\n\n  /** @inheritdoc */\n  parseValue(rawValue: FieldParserRawValue): Byte | undefined {\n    const parser = NumberParser.shared;\n    return parser.parseValue(rawValue);\n  }\n}\n"]}