{"version":3,"file":"mediatype.js","sourceRoot":"","sources":["../../../src/field-types/mediatype.ts"],"names":[],"mappings":"AAiBA,MAAM,OAAO,eAAe;IAK1B,kBAAkB;IAClB,UAAU,CAAC,QAA6B;QACtC,IAAI,OAAO,QAAQ,KAAK,QAAQ;YAAE,OAAO,SAAS,CAAC;QACnD,OAAO,QAAqB,CAAC;IAC/B,CAAC;;AARD,0DAA0D;AAC1D,6CAA6C;AACtC,sBAAM,GAAG,IAAI,eAAe,EAAE,CAAC","sourcesContent":["import {\n  FieldParserInterface,\n  FieldParserRawValue,\n} from '../field-parser-interface';\n\nexport type MediaType =\n  | 'account'\n  | 'audio'\n  | 'collection'\n  | 'data'\n  | 'etree'\n  | 'image'\n  | 'movies'\n  | 'software'\n  | 'texts'\n  | 'web';\n\nexport class MediaTypeParser implements FieldParserInterface<MediaType> {\n  // use a shared static instance for performance instead of\n  // instantiating a new instance for every use\n  static shared = new MediaTypeParser();\n\n  /** @inheritdoc */\n  parseValue(rawValue: FieldParserRawValue): MediaType | undefined {\n    if (typeof rawValue !== 'string') return undefined;\n    return rawValue as MediaType;\n  }\n}\n"]}