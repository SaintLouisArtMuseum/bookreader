import { __decorate } from "tslib";
import { LitElement, html, nothing } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import menuSliderCSS from './styles/menu-slider';
import '@internetarchive/icon-collapse-sidebar';
import './menu-button';
const sliderEvents = {
    closeDrawer: 'menuSliderClosed',
};
let IaMenuSlider = class IaMenuSlider extends LitElement {
    constructor() {
        super(...arguments);
        this.menus = [];
        this.open = false;
        this.manuallyHandleClose = false;
        this.selectedMenu = '';
        this.selectedMenuAction = nothing;
        this.animateMenuOpen = false;
    }
    static get styles() {
        return menuSliderCSS;
    }
    updated() {
        const { actionButton } = this.selectedMenuDetails || {};
        const actionButtonHasChanged = actionButton !== this.selectedMenuAction;
        if (actionButtonHasChanged) {
            this.selectedMenuAction = actionButton || nothing;
        }
    }
    /**
     * Event handler, captures state of selected menu
     */
    setSelectedMenu({ detail }) {
        const { id } = detail;
        this.selectedMenu = this.selectedMenu === id ? '' : id;
        const { actionButton } = this.selectedMenuDetails || {};
        this.selectedMenuAction = actionButton || nothing;
    }
    /**
     * closes menu drawer
     */
    closeMenu() {
        if (!this.manuallyHandleClose) {
            this.open = false;
        }
        const { closeDrawer } = sliderEvents;
        const drawerClosed = new CustomEvent(closeDrawer, {
            detail: this.selectedMenuDetails,
        });
        this.dispatchEvent(drawerClosed);
    }
    get selectedMenuDetails() {
        const selectedMenu = this.menus.find(menu => menu.id === this.selectedMenu);
        return selectedMenu;
    }
    get selectedMenuComponent() {
        const menuItem = this.selectedMenuDetails;
        return menuItem && (menuItem === null || menuItem === void 0 ? void 0 : menuItem.component)
            ? menuItem.component
            : html ``;
    }
    /* render */
    get sliderDetailsClass() {
        const animate = this.animateMenuOpen ? 'animate' : '';
        const state = this.open ? 'open' : '';
        return `${animate} ${state}`;
    }
    get selectedMenuClass() {
        return this.selectedMenu ? 'open' : '';
    }
    get menuItems() {
        return this.menus.map((menu) => html `
        <li>
          <menu-button
            @menuTypeSelected=${this.setSelectedMenu}
            .icon=${menu.icon}
            .label=${menu.label}
            .menuDetails=${menu.menuDetails}
            .buttonId=${menu.id}
            .selected=${menu.id === this.selectedMenu}
            .followable=${menu.followable}
            .href=${menu.href}
          ></menu-button>
        </li>
      `);
    }
    get renderMenuHeader() {
        const { label = '', menuDetails = '' } = this.selectedMenuDetails || {};
        const headerClass = this.selectedMenuAction ? 'with-secondary-action' : '';
        const actionBlock = this.selectedMenuAction
            ? html `<span class="custom-action">${this.selectedMenuAction}</span>`
            : nothing;
        return html `
      <header class="${headerClass}">
        <div class="details">
          <h3>${label}</h3>
          <span class="extra-details">${menuDetails}</span>
        </div>
        ${actionBlock} ${this.closeButton}
      </header>
    `;
    }
    get closeButton() {
        return html `
      <button
        class="close"
        aria-label="Close this menu"
        @click=${this.closeMenu}
      >
        <ia-icon-collapse-sidebar></ia-icon-collapse-sidebar>
      </button>
    `;
    }
    /** @inheritdoc */
    render() {
        return html `
      <div class="main">
        <div class="menu ${this.sliderDetailsClass}">
          ${this.closeButton}
          <ul class="menu-list">
            ${this.menuItems}
          </ul>
          <div
            class="content ${this.selectedMenuClass}"
            @menuTypeSelected=${this.setSelectedMenu}
          >
            ${this.renderMenuHeader}
            <section>
              <div class="selected-menu">${this.selectedMenuComponent}</div>
            </section>
          </div>
        </div>
      </div>
    `;
    }
};
__decorate([
    property({ type: Array })
], IaMenuSlider.prototype, "menus", void 0);
__decorate([
    property({ type: Boolean })
], IaMenuSlider.prototype, "open", void 0);
__decorate([
    property({ type: Boolean })
], IaMenuSlider.prototype, "manuallyHandleClose", void 0);
__decorate([
    property({ type: String })
], IaMenuSlider.prototype, "selectedMenu", void 0);
__decorate([
    property({ type: Object })
], IaMenuSlider.prototype, "selectedMenuAction", void 0);
__decorate([
    property({ type: Boolean })
], IaMenuSlider.prototype, "animateMenuOpen", void 0);
IaMenuSlider = __decorate([
    customElement('ia-menu-slider')
], IaMenuSlider);
export { IaMenuSlider };
//# sourceMappingURL=ia-menu-slider.js.map