import { __decorate } from "tslib";
import { html, LitElement } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import menuButtonCSS from './styles/menu-button';
let MenuButton = class MenuButton extends LitElement {
    constructor() {
        super(...arguments);
        this.icon = '';
        this.href = '';
        this.label = '';
        this.menuDetails = '';
        this.buttonId = '';
        this.selected = false;
        this.followable = false;
    }
    static get styles() {
        return menuButtonCSS;
    }
    onClick(e) {
        e.preventDefault();
        this.dispatchMenuTypeSelectedEvent();
    }
    dispatchMenuTypeSelectedEvent() {
        this.dispatchEvent(new CustomEvent('menuTypeSelected', {
            bubbles: true,
            composed: true,
            detail: {
                id: this.buttonId,
            },
        }));
    }
    get buttonClass() {
        return this.selected ? 'selected' : '';
    }
    get iconClass() {
        return this.selected ? 'active' : '';
    }
    get menuItem() {
        return html `
      <span class="icon ${this.iconClass}"> ${this.icon} </span>
      <span class="label">${this.label}</span>
      <span class="menu-details">${this.menuDetails}</span>
    `;
    }
    get linkButton() {
        return html `
      <a
        href="${this.href}"
        class="menu-item ${this.buttonClass}"
        @click=${this.followable ? undefined : this.onClick}
        >${this.menuItem}</a
      >
    `;
    }
    get clickButton() {
        return html `
      <button class="menu-item ${this.buttonClass}" @click=${this.onClick}>
        ${this.menuItem}
      </button>
    `;
    }
    render() {
        return this.href ? this.linkButton : this.clickButton;
    }
};
__decorate([
    property({ type: String })
], MenuButton.prototype, "icon", void 0);
__decorate([
    property({ type: String })
], MenuButton.prototype, "href", void 0);
__decorate([
    property({ type: String })
], MenuButton.prototype, "label", void 0);
__decorate([
    property({ type: String })
], MenuButton.prototype, "menuDetails", void 0);
__decorate([
    property({ type: String })
], MenuButton.prototype, "buttonId", void 0);
__decorate([
    property({ type: Boolean })
], MenuButton.prototype, "selected", void 0);
__decorate([
    property({ type: Boolean })
], MenuButton.prototype, "followable", void 0);
MenuButton = __decorate([
    customElement('menu-button')
], MenuButton);
export { MenuButton };
//# sourceMappingURL=menu-button.js.map