import { LitElement, PropertyValues, CSSResult, TemplateResult, nothing } from 'lit';
import { MetadataResponse } from '@internetarchive/search-service';
import { SharedResizeObserver, SharedResizeObserverResizeHandlerInterface } from '@internetarchive/shared-resize-observer';
import { ModalManager } from '@internetarchive/modal-manager';
import '@internetarchive/icon-ellipses/icon-ellipses';
import './menu-slider/ia-menu-slider';
import './loader';
import { ToggleSideMenuOpenEvent, ToggleSidePanelOpenEvent, SetSideMenuContentsEvent, SetSideMenuShortcutsEvent, loadingStateUpdatedEvent, ManageFullscreenEvent } from './interfaces/event-interfaces';
import { MenuProviderInterface, MenuShortcutInterface, MenuId } from './interfaces/menu-interfaces';
import './no-theater-available';
export declare class ItemNavigator extends LitElement implements SharedResizeObserverResizeHandlerInterface {
    item?: MetadataResponse;
    viewAvailable: Boolean;
    baseHost: string;
    signedIn: boolean;
    menuContents: MenuProviderInterface[];
    menuShortcuts: MenuShortcutInterface[];
    viewportInFullscreen: boolean | null;
    menuOpened: boolean;
    openMenu?: MenuId;
    modal?: ModalManager;
    sharedObserver?: SharedResizeObserver;
    loaded: boolean;
    openMenuState: 'overlay' | 'shift';
    private frame;
    private headerSlot;
    private mainSlot;
    disconnectedCallback(): void;
    updated(changed: PropertyValues): void;
    /** Shared observer */
    handleResize(entry: ResizeObserverEntry): void;
    private setResizeObserver;
    private removeResizeObserver;
    get resizeObserverConfig(): {
        handler: SharedResizeObserverResizeHandlerInterface;
        target: Element;
    };
    /** End shared observer */
    get loaderTitle(): "" | "Internet Archive";
    get loadingArea(): TemplateResult<1>;
    slotChange(e: Event, type: 'header' | 'main'): void;
    render(): TemplateResult;
    get noTheaterView(): TemplateResult<1>;
    get renderViewport(): TemplateResult | typeof nothing;
    loadingStateUpdated(e: loadingStateUpdatedEvent): void;
    /** Fullscreen Management */
    manageViewportFullscreen(e: ManageFullscreenEvent): void;
    /** End Fullscreen Management */
    /** Side menu */
    get shouldRenderMenu(): boolean;
    toggleMenu(): void;
    closeMenu(): void;
    setOpenMenu(e: ToggleSidePanelOpenEvent): void;
    setMenuContents(e: SetSideMenuContentsEvent): void;
    setMenuShortcuts(e: SetSideMenuShortcutsEvent): void;
    /** Toggles Side Menu & Sets viewable subpanel  */
    manageSideMenuEvents(e: ToggleSideMenuOpenEvent): void;
    get menuToggleButton(): TemplateResult<1>;
    get selectedMenuId(): MenuId | '';
    get renderSideMenu(): TemplateResult;
    /** End Side menu */
    /** Menu Shortcuts */
    openShortcut(selectedMenuId?: MenuId): void;
    get shortcuts(): TemplateResult;
    /** End Menu Shortcuts */
    /** Misc Render */
    get menuClass(): string;
    static get styles(): CSSResult;
}
