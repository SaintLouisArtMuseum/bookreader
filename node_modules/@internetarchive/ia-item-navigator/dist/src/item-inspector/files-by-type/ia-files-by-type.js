import { __decorate } from "tslib";
import { html, customElement, LitElement, property } from 'lit-element';
let IaFilesByType = class IaFilesByType extends LitElement {
    constructor() {
        super(...arguments);
        this.item = {};
        this.archivalArtifacts = [];
        this.collapsedFiles = [];
    }
    firstUpdated() {
        this.collapseFiles();
    }
    render() {
        return html `
      <div>
        <p>there are ${this.collapsedFiles.length} original files</p>

        <p>there are ${this.archivalArtifacts.length} archival artifacts</p>

        <p></p>
      </div>
    `;
    }
    sortByViewer() {
        //   const images = [];
        //   const books = [];
        //   const radio = [];
        //   const audio = [];
        //   const video = [];
        //   const albums = [];
        //   const software = [];
        //  this.collapsedFiles.forEach((fi) => {
        //   // if image
        //   // sort by various viewers
        //  })
        return true;
    }
    collapseFiles() {
        const { files = [] } = this === null || this === void 0 ? void 0 : this.item;
        const archivalArtifacts = [];
        const origDir = {};
        files.forEach(fi => {
            const { format, source, name, original = '' } = fi;
            if (format.toLowerCase() === 'metadata' ||
                format.toLowerCase() === 'item tile') {
                archivalArtifacts.push(fi);
                return;
            }
            let origEntry = {};
            if (source === 'original') {
                origEntry = origDir[name];
                if (!origEntry) {
                    // add new
                    origDir[name] = { ...fi, derivatives: [] };
                    origEntry = origDir[name];
                }
                else {
                    // update
                    const merged = { ...origEntry, ...fi };
                    origDir[name] = merged;
                }
                return;
            }
            if (source === 'derivative') {
                const keyToFile = original || '';
                origEntry = origDir[keyToFile];
                if (!origEntry && original) {
                    // add new
                    const fileFrame = { derivatives: [] };
                    origEntry = fileFrame;
                    origEntry === null || origEntry === void 0 ? void 0 : origEntry.derivatives.push(fi);
                    origDir[keyToFile] = origEntry;
                    origEntry = origDir[keyToFile];
                }
                origEntry === null || origEntry === void 0 ? void 0 : origEntry.derivatives.push(fi);
            }
        });
        this.archivalArtifacts = archivalArtifacts;
        this.collapsedFiles = Object.keys(origDir).map((fileName) => origDir[fileName]);
    }
};
__decorate([
    property({ type: Object })
], IaFilesByType.prototype, "item", void 0);
__decorate([
    property({ type: Array })
], IaFilesByType.prototype, "archivalArtifacts", void 0);
__decorate([
    property({ type: Array })
], IaFilesByType.prototype, "collapsedFiles", void 0);
IaFilesByType = __decorate([
    customElement('ia-files-by-type')
], IaFilesByType);
export default IaFilesByType;
//# sourceMappingURL=ia-files-by-type.js.map