{"version":3,"file":"item-inspector.js","sourceRoot":"","sources":["../../../src/item-inspector/item-inspector.ts"],"names":[],"mappings":"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","sourcesContent":["// /* eslint-disable no-console */\n// import {\n//   css,\n//   html,\n//   LitElement,\n//   customElement,\n//   property,\n//   state,\n// } from 'lit-element';\n// import { MetadataResponse } from '@internetarchive/search-service';\n\n// import {\n//   ModalManagerInterface,\n//   ModalConfig,\n// } from '@internetarchive/modal-manager';\n// import { SharedResizeObserverInterface } from '@internetarchive/shared-resize-observer';\n// import { IntNavController } from '../interfaces/nav-controller-interface';\n// import {\n//   IntMenuProvider,\n//   IntMenuShortcut,\n// } from '../interfaces/menu-interfaces';\n// import { IntManageFullscreenEvent } from '../interfaces/event-interfaces';\n\n// import { ShareProvider } from './share-provider';\n// import { FilesByTypeProvider } from './files-by-type/files-by-type-provider';\n// import { VisualModsProvider } from './visual-mod-provider';\n\n// // eslint-disable-next-line no-shadow\n// enum ItemInspectorEvents {\n//   menuUpdated = 'menuUpdated',\n//   updateSideMenu = 'updateSideMenu',\n//   PostInit = 'PostInit',\n//   ViewportInFullScreen = 'ViewportInFullScreen',\n// }\n\n// interface menuProvidersInt {\n//   [menuId: string]: IntMenuProvider;\n// }\n\n// @customElement('ia-item-inspector')\n// export class IaItemInspector extends LitElement implements IntNavController {\n//   @property({ type: Object }) itemMD: MetadataResponse = {\n//     metadata: {},\n//   } as MetadataResponse;\n\n//   @property({ type: String }) baseHost = 'https://archive.org';\n\n//   @property({ type: Object }) menuProviders: menuProvidersInt = {};\n\n//   @property({ type: Array }) menuShortcuts: IntMenuShortcut[] = [];\n\n//   @property({ type: Boolean }) sideMenuOpen = false;\n\n//   @property({ type: Boolean }) fullscreenState = false;\n\n//   @property({ attribute: false }) modal!: ModalManagerInterface;\n\n//   @property({ attribute: false }) sharedRO!: SharedResizeObserverInterface;\n\n//   @state() fileCount: number = 0;\n\n//   @state() loaded: boolean = false;\n\n//   @state() private shortcutOrder = ['visualMods'];\n\n//   firstUpdated() {\n//     this.loaded = true;\n//     console.log('modal', this.modal);\n//   }\n\n//   updated(changed: any) {\n//     if (changed.has('loaded')) {\n//       setTimeout(() => this.emitLoadingStatusUpdate(this.loaded), 1000);\n//     }\n\n//     if (changed.has('itemMD') && this.itemMD) {\n//       this.parseItemInfo();\n//       this.setMenu();\n//     }\n\n//     if (changed.has('menuProviders') || changed.has('menuShortcuts')) {\n//       this.updateMenuContents();\n//     }\n//   }\n\n//   modalClosedCallback() {\n//     console.log('item-inspector, modal closed');\n//   }\n\n//   openModal() {\n//     const config = new ModalConfig();\n//     const customModalContent = html`\n//       Can contain any markup, including web components. Event listeners also\n//       work. Try clicking on the picture.\n//       <div style=\"text-align: center\">\n//         <a href=\"https://fillmurray.com\" style=\"display: block\">Fill Murray</a>\n//         <img src=\"100x100.jpg\" alt=\"foo\" />\n//       </div>\n//     `;\n\n//     this.modal.showModal({\n//       config,\n//       customModalContent,\n//       userClosedModalCallback: this.modalClosedCallback,\n//     });\n//   }\n\n//   render() {\n//     const { identifier = '' } = this.itemMD?.metadata;\n//     return html`\n//       <section>\n//         <div>\n//           <h2>${identifier}</h2>\n//         </div>\n//         <img src=${this.imageUrl} alt=${`${identifier} thumbnail`} />\n//         <button @click=${() => this.openModal()}>open modal</button>\n//         <p style=\"font-size: 20px;\">\n//           Bacon ipsum dolor amet flank chicken leberkas sausage, meatball pork\n//           belly jowl. Chislic bacon salami frankfurter shankle drumstick\n//           andouille ball tip alcatra. Fatback beef ribs chicken, jerky ground\n//           round hamburger pork chop biltong. Shoulder short loin rump jerky\n//           kielbasa pork porchetta fatback ribeye pork belly sirloin chislic\n//           turducken corned beef tri-tip. Chuck pancetta meatball tail, spare\n//           ribs ham hock capicola pig. Ham hock hamburger chicken tri-tip venison\n//           swine burgdoggen boudin meatloaf pastrami chuck. Tri-tip spare ribs\n//           drumstick, tail rump hamburger burgdoggen swine t-bone tongue\n//           andouille chislic alcatra. Pork loin jowl frankfurter, doner meatball\n//           short loin ham hock filet mignon hamburger rump turkey bresaola\n//           shoulder sirloin flank. Ribeye sausage pig t-bone bacon frankfurter\n//           cupim capicola fatback pastrami ball tip pork belly. Picanha pancetta\n//           andouille flank shankle venison tri-tip tail, kevin turkey turducken\n//           chicken. Bacon picanha swine frankfurter, prosciutto chislic doner\n//           alcatra pork loin corned beef jowl biltong meatball chuck. Bacon\n//           burgdoggen pig fatback cupim t-bone. Cow pork loin bresaola brisket\n//           shoulder filet mignon chicken. Sirloin bresaola porchetta beef\n//           capicola meatloaf brisket shankle jerky turkey pork tri-tip swine\n//           kevin salami. Meatball t-bone doner venison. Pig tri-tip chuck, shank\n//           chicken pork chop landjaeger spare ribs jerky swine ham hock buffalo\n//           sirloin. Leberkas pancetta tenderloin, meatloaf buffalo rump pastrami\n//           chuck. Jerky cupim porchetta, tenderloin chuck andouille venison pork\n//           salami. Chuck strip steak cupim, turducken ham hock kielbasa shoulder\n//           porchetta chislic short loin tri-tip biltong cow corned beef.\n//         </p>\n//       </section>\n//     `;\n//   }\n\n//   addMenuShortcut(menuId: keyof menuProvidersInt) {\n//     if (this.menuShortcuts.find(m => m.id === menuId)) {\n//       return;\n//     }\n\n//     const shortcut = this.menuProviders[menuId];\n//     this.menuShortcuts.push(shortcut);\n//     this.sortMenuShortcuts();\n//     this.emitMenuShortcutsUpdated();\n//   }\n\n//   /**\n//    * Removes a provider object from the menuShortcuts array and emits a\n//    * menuShortcutsUpdated event.\n//    */\n//   removeMenuShortcut(menuId: string) {\n//     this.menuShortcuts = this.menuShortcuts.filter(m => m.id !== menuId);\n//     this.emitMenuShortcutsUpdated();\n//   }\n\n//   /**\n//    * Sorts the menuShortcuts property by comparing each provider's id to\n//    * the id in each iteration over the shortcutOrder array.\n//    */\n//   sortMenuShortcuts() {\n//     this.menuShortcuts = this.shortcutOrder.reduce(\n//       (shortcuts: IntMenuShortcut[], id) => {\n//         const menu = this.menuShortcuts.find(m => m.id === id);\n\n//         // eslint-disable-next-line no-param-reassign\n//         if (menu) {\n//           const newShortcuts = [...shortcuts, menu];\n//           // eslint-disable-next-line no-param-reassign\n//           shortcuts = newShortcuts;\n//         }\n//         return shortcuts;\n//       },\n//       []\n//     );\n//   }\n\n//   emitMenuShortcutsUpdated() {\n//     const event = new CustomEvent('menuShortcutsUpdated', {\n//       detail: this.menuShortcuts,\n//     });\n//     this.dispatchEvent(event);\n//   }\n\n//   setMenu() {\n//     const menuProviders = {\n//       share: new ShareProvider({\n//         item: this.itemMD,\n//         baseHost: this.baseHost,\n//         subPrefix: '',\n//       }),\n//       filesByType: new FilesByTypeProvider({\n//         item: this.itemMD,\n//         baseHost: this.baseHost,\n//         subPrefix: '',\n//       }),\n//       visualMods: new VisualModsProvider({\n//         updated: (modType: string) => {\n//           if (modType === 'toggleFullscreen') {\n//             this.updateFullscreenState();\n//           }\n//         },\n//         item: this.itemMD,\n//         baseHost: this.baseHost,\n//         subPrefix: '',\n//         // maybe DOM root for class configs?\n//       }),\n//     };\n\n//     this.menuProviders = menuProviders;\n//     this.addMenuShortcut('visualMods');\n//   }\n\n//   updateFullscreenState() {\n//     const isFullScreen = !this.fullscreenState;\n//     this.fullscreenState = isFullScreen;\n\n//     const event = new CustomEvent('ViewportInFullScreen', {\n//       detail: { isFullScreen },\n//     } as IntManageFullscreenEvent);\n//     this.dispatchEvent(event);\n//   }\n\n//   updateMenuContents() {\n//     const { share, filesByType, visualMods } = this.menuProviders;\n//     const availableMenus = [filesByType, share, visualMods].filter(\n//       menu => !!menu\n//     );\n\n//     const event = new CustomEvent(ItemInspectorEvents.menuUpdated, {\n//       detail: availableMenus,\n//     });\n\n//     this.dispatchEvent(event);\n//   }\n\n//   emitLoadingStatusUpdate(loaded: boolean) {\n//     const event = new CustomEvent('loadingStateUpdated', {\n//       detail: { loaded },\n//     });\n//     this.dispatchEvent(event);\n//   }\n\n//   parseItemInfo() {\n//     this.fileCount = this.itemMD?.files?.length || 0;\n//   }\n\n//   get imageUrl() {\n//     const { metadata = {} } = this.itemMD;\n//     const url = `${this.baseHost}/download/${metadata?.identifier}/__ia_thumb.jpg`;\n//     return url;\n//   }\n\n//   static get styles() {\n//     const main = css`\n//       :host {\n//         display: block;\n//         width: 100%;\n//         margin: 0 auto;\n//         position: relative;\n//         overflow: auto;\n//         background-color: black;\n//         color: var(--primaryTextColor, #fff);\n//       }\n\n//       :host,\n//       section {\n//         min-height: inherit;\n//         height: inherit;\n//       }\n\n//       section {\n//         margin: auto;\n//         width: 100%;\n//         text-align: center;\n//       }\n\n//       img {\n//         border: 1px solid var(--primaryTextColor, #fff);\n//       }\n//     `;\n//     return [main];\n//   }\n// }\n"]}