/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable max-classes-per-file */
import { __decorate } from "tslib";
import { html, customElement, LitElement } from 'lit-element';
import '@internetarchive/ia-sharing-options';
import '@internetarchive/icon-visual-adjustment/icon-visual-adjustment';
let VisualMods = class VisualMods extends LitElement {
    toggleFullscreen() {
        this.dispatchEvent(new Event('fullscreenToggle'));
    }
    render() {
        return html `<section>
      <button @click=${this.toggleFullscreen}>Toggle Fullscreen</button>
    </section>`;
    }
};
VisualMods = __decorate([
    customElement('ia-visual-mods')
], VisualMods);
export class VisualModsProvider {
    constructor(providerArgs) {
        this.item = null;
        this.baseHost = 'https://archive.org';
        this.icon = html `<ia-icon-visual-adjustment
    style="width: var(--iconWidth); height: var(--iconHeight);"
  ></ia-icon-visual-adjustment>`;
        this.id = 'visualMods';
        this.label = 'Visual Modifications';
        this.component = null;
        this.subPrefix = '';
        this.encodedSubPrefix = '';
        this.updated = () => { };
        const { item, baseHost, subPrefix = '', updated } = providerArgs;
        this.updated = updated;
        this.component = html `<ia-visual-mods
      @fullscreenToggle=${() => this === null || this === void 0 ? void 0 : this.updated('toggleFullscreen')}
      @openModa=${this.openModal}
    ></ia-visual-mods>`;
    }
    openModal() { }
    closeModal() { }
    toggleFullscreen() {
        this.updated('toggleFullscreen');
    }
}
//# sourceMappingURL=visual-mod-provider.js.map