import { html, fixture, expect } from '@open-wc/testing';
import '../src/no-theater-available';
describe('IANoTheaterAvailable', () => {
    it('Fires `loadingStateUpdated` on identifier change', async () => {
        const el = await fixture(html `<ia-no-theater-available
        .identifier=${`foo`}
      ></ia-no-theater-available>`);
        let eventFired = false;
        el.addEventListener('loadingStateUpdated', () => {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            eventFired = true;
        });
        expect(eventFired).to.be.false;
        el.identifier = 'bar';
        await el.updateComplete;
        expect(eventFired).to.be.true;
    });
    it('Has link to item download page', async () => {
        var _a, _b;
        const el = await fixture(html `<ia-no-theater-available
        .identifier=${`foo`}
      ></ia-no-theater-available>`);
        expect(el.downloadUrl).to.equal('/download/foo');
        expect((_b = (_a = el === null || el === void 0 ? void 0 : el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('a')) === null || _b === void 0 ? void 0 : _b.href).to.contain(el.downloadUrl);
    });
});
//# sourceMappingURL=no-theater-available.test.js.map