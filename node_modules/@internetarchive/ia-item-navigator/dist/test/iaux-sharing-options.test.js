import { html, fixture, expect } from '@open-wc/testing';
import sinon from 'sinon';
import '../src/menus/share-panel';
const identifier = 'goody';
const itemType = 'book';
const creator = 'Welsh, Charles';
const description = 'The history of Little Goody Two-Shoes : otherwise called Mrs. Margery Two-Shoes ... [1766 edition]';
const container = (optionalFileSubprefix = '') => html `<iaux-in-share-panel
    identifier="${identifier}"
    type="${itemType}"
    creator="${creator}"
    description="${description}"
    baseHost="archive.org"
    fileSubPrefix="${optionalFileSubprefix}"
  ></iaux-in-share-panel>`;
describe('<iaux-in-share-panel>', () => {
    afterEach(() => {
        sinon.restore();
    });
    it('sets default properties', async () => {
        const el = (await fixture(container()));
        expect(el.identifier).to.equal(identifier);
        expect(el.type).to.equal(itemType);
        expect(el.creator).to.equal(creator);
        expect(el.description).to.equal(description);
    });
    it('renders buttons for each sharing method', async () => {
        const el = (await fixture(container()));
        await el.updateComplete;
        el.sharingOptions.forEach((option, i) => {
            var _a;
            const button = (_a = el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelectorAll('a')[i];
            expect(button).to.exist;
            expect(button === null || button === void 0 ? void 0 : button.getAttribute('href')).to.equal(option.url);
        });
    });
    it('does not show internal header by default', async () => {
        var _a;
        const el = (await fixture(container()));
        expect((_a = el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('header')).to.be.null;
    });
    it('does shows internal header when requested', async () => {
        var _a;
        const el = (await fixture(container()));
        el.renderHeader = true;
        await el.updateComplete;
        expect((_a = el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('header')).to.not.be.null;
    });
    it('sets file subprefix to end of share URLs if present', async () => {
        const el = (await fixture(container('foo 123')));
        el.sharingOptions.forEach(option => {
            expect(option.url).to.contain('foo+123');
        });
    });
});
//# sourceMappingURL=iaux-sharing-options.test.js.map