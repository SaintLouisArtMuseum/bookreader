import { LitElement, TemplateResult } from 'lit';
import { MetadataResponse } from '@internetarchive/search-service';
import { SharedResizeObserver } from '@internetarchive/shared-resize-observer';
import { ModalManager } from '@internetarchive/modal-manager';
import '@internetarchive/modal-manager';
import '../src/iaux-item-navigator';
import '../src/menus/share-panel';
import { MenuShortcutInterface, MenuProviderInterface } from '../src/interfaces/menu-interfaces';
export declare class AppRoot extends LitElement {
    /**
     * Example controller to connect to `<iaux-item-navigator>`
     */
    itemMD?: MetadataResponse;
    encodedManifest: string;
    sharedObserver: SharedResizeObserver;
    menuContents: MenuProviderInterface[];
    menuShortcuts: MenuShortcutInterface[];
    fullscreen: boolean | null;
    headerOn: true | null;
    loaded: true | null;
    showPlaceholder: true | null;
    showTheaterExample: true | null;
    fileListToDisplay: any[];
    private itemNav;
    modalMgr: ModalManager;
    firstUpdated(): void;
    updated(changed: any): void;
    fetchItemMD(): Promise<void>;
    get theaterReady(): boolean;
    get urlParams(): URLSearchParams;
    /** Fullscreen */
    get showFullscreen(): boolean;
    /** sets url query param `view=theater` to toggle fullscreen */
    toggleFS(): void;
    /** toggles attr: `<iaux-item-navigator viewportinfullscreen>` */
    fullscreenCheck(): void;
    /** End fullscreen */
    toggleHeader(): void;
    toggleLoader(): void;
    togglePlaceholder(): void;
    toggleImmersion(): void;
    toggleTheaterExample(): void;
    drawMenus(): void;
    sortFilesCallback(e: CustomEvent): Promise<void>;
    /** Views */
    get theaterExample(): TemplateResult;
    get headerExample(): TemplateResult;
    get isViewAvailable(): boolean;
    render(): TemplateResult;
    static styles: import("lit").CSSResult;
}
