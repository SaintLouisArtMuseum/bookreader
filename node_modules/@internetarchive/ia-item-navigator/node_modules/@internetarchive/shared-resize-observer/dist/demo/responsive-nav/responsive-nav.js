import { __decorate } from "tslib";
import { html, css, LitElement, property, customElement, query, } from 'lit-element';
import iaIcon from '@internetarchive/icon-ia-logo';
import webIcon from '@internetarchive/icon-web';
import booksIcon from '@internetarchive/icon-texts';
import videoIcon from '@internetarchive/icon-video';
import audioIcon from '@internetarchive/icon-audio';
import softwareIcon from '@internetarchive/icon-software';
import imagesIcon from '@internetarchive/icon-images';
import userIcon from '@internetarchive/icon-user';
import uploadIcon from '@internetarchive/icon-upload';
import donateIcon from '@internetarchive/icon-donate';
import hamburgerIcon from '../icons/hamburger';
import './nav-item';
import './nav-menu';
import { nothing } from 'lit-html';
import { ResponsiveNavMenuMode } from './models/menu-mode';
export var ResponsiveNavLeftMenuMode;
(function (ResponsiveNavLeftMenuMode) {
    ResponsiveNavLeftMenuMode["Full"] = "full";
    ResponsiveNavLeftMenuMode["Hamburger"] = "hamburger";
})(ResponsiveNavLeftMenuMode || (ResponsiveNavLeftMenuMode = {}));
let ResponsiveNav = class ResponsiveNav extends LitElement {
    constructor() {
        super(...arguments);
        this.menuGap = 40;
        this.showHiddenItems = false;
        this.showDevOutline = false;
        this.id = `${Math.random()}`;
        this.navItemSpacing = 10;
        this.leftMenuMode = ResponsiveNavLeftMenuMode.Full;
        this.leftMenuDisplayMode = ResponsiveNavMenuMode.IconText;
        this.rightMenuDisplayMode = ResponsiveNavMenuMode.IconText;
    }
    disconnectedCallback() {
        this.disconnectResizeObserver();
    }
    updated(changed) {
        if (changed.has('resizeObserver')) {
            this.setupResizeObserver();
        }
    }
    handleResize(entry) {
        const contentRect = entry.contentRect;
        const availableWidth = contentRect.width - this.menuGap;
        const fullTextWidth = this.mainMenu.estimateFullWidth + this.rightMenu.estimateFullWidth;
        const leftIconRightText = this.mainMenu.estimateIconOnlyWidth + this.rightMenu.estimateFullWidth;
        const iconOnlyWidth = this.mainMenu.estimateIconOnlyWidth +
            this.rightMenu.estimateIconOnlyWidth;
        if (availableWidth < iconOnlyWidth) {
            this.leftMenuMode = ResponsiveNavLeftMenuMode.Hamburger;
            this.leftMenuDisplayMode = ResponsiveNavMenuMode.IconOnly;
            this.rightMenuDisplayMode = ResponsiveNavMenuMode.IconOnly;
        }
        else if (availableWidth < leftIconRightText) {
            this.leftMenuMode = ResponsiveNavLeftMenuMode.Full;
            this.leftMenuDisplayMode = ResponsiveNavMenuMode.IconOnly;
            this.rightMenuDisplayMode = ResponsiveNavMenuMode.IconOnly;
        }
        else if (availableWidth < fullTextWidth) {
            this.leftMenuMode = ResponsiveNavLeftMenuMode.Full;
            this.leftMenuDisplayMode = ResponsiveNavMenuMode.IconOnly;
            this.rightMenuDisplayMode = ResponsiveNavMenuMode.IconText;
        }
        else {
            this.leftMenuMode = ResponsiveNavLeftMenuMode.Full;
            this.leftMenuDisplayMode = ResponsiveNavMenuMode.IconText;
            this.rightMenuDisplayMode = ResponsiveNavMenuMode.IconText;
        }
    }
    get currentLeftMenu() {
        return this.leftMenuMode === ResponsiveNavLeftMenuMode.Full
            ? this.mainMenu
            : this.hamburgerMenu;
    }
    get currentMenuOptions() {
        return this.showHiddenItems
            ? this.extendedMenuOptions
            : this.baseMenuOptions;
    }
    get baseMenuOptions() {
        return [
            {
                title: 'Internet Archive',
                icon: iaIcon,
            },
            {
                title: 'Web',
                icon: webIcon,
            },
            {
                title: 'Books',
                icon: booksIcon,
            },
            {
                title: 'Video',
                icon: videoIcon,
            },
            {
                title: 'Audio',
                icon: audioIcon,
            },
            {
                title: 'Software',
                icon: softwareIcon,
            },
            {
                title: 'Images',
                icon: imagesIcon,
            },
        ];
    }
    get extendedMenuOptions() {
        return this.baseMenuOptions.concat([
            {
                title: 'Donate',
                icon: donateIcon,
            },
        ]);
    }
    get rightMenuOptions() {
        return [
            {
                title: 'ArchiveUser',
                icon: userIcon,
            },
            {
                title: 'Upload',
                icon: uploadIcon,
            },
        ];
    }
    get hamburgerMenuOptions() {
        return [
            {
                icon: hamburgerIcon,
            },
        ];
    }
    disconnectResizeObserver() {
        var _a;
        if (!this.shadowRoot)
            return;
        (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.removeObserver({
            handler: this,
            target: this.shadowRoot.host,
        });
    }
    setupResizeObserver() {
        var _a;
        if (!this.shadowRoot)
            return;
        (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.addObserver({
            handler: this,
            target: this.shadowRoot.host,
        });
    }
    get hamburgerMenuTemplate() {
        return html `
      <responsive-nav-menu
        id="hamburger-menu"
        .itemMode=${ResponsiveNavMenuMode.IconOnly}
        .navItemSpacing=${this.navItemSpacing}
        .menuOptions=${this.hamburgerMenuOptions}
      ></responsive-nav-menu>
    `;
    }
    get mainLeftMenuTemplate() {
        return html `
      <responsive-nav-menu
        id="main-menu"
        .navItemSpacing=${this.navItemSpacing}
        .menuOptions=${this.currentMenuOptions}
        .itemMode=${this.leftMenuDisplayMode}
      ></responsive-nav-menu>
    `;
    }
    get rightMenuTemplate() {
        return html `
      <responsive-nav-menu
        id="right-menu"
        class="right"
        .navItemSpacing=${this.navItemSpacing}
        .menuOptions=${this.rightMenuOptions}
        itemMode=${this.rightMenuDisplayMode}
      ></responsive-nav-menu>
    `;
    }
    render() {
        return html `
      <div
        id="container"
        class="${this.showDevOutline ? 'show-dev-outlines' : nothing}"
      >
        <div
          class="left-menu ${this.leftMenuMode ===
            ResponsiveNavLeftMenuMode.Hamburger
            ? 'hamburger'
            : 'full'}"
        >
          ${this.hamburgerMenuTemplate} ${this.mainLeftMenuTemplate}
        </div>

        <div id="dev-visual-spacer" style="width: ${this.menuGap}px"></div>

        ${this.rightMenuTemplate}
      </div>
    `;
    }
    static get styles() {
        return css `
      :host {
        display: block;
        padding: 1rem 2rem;
        position: relative;
      }

      #dev-visual-spacer {
        display: inline-block;
        height: 10px;
      }

      .show-dev-outlines responsive-nav-menu {
        outline: 1px solid cyan;
      }

      .show-dev-outlines #dev-visual-spacer {
        background-color: green;
      }

      .left-menu {
        display: inline-block;
      }

      .left-menu.full #hamburger-menu {
        position: absolute;
        left: -10000px;
        visibility: hidden;
      }

      .left-menu.hamburger #main-menu {
        position: absolute;
        left: -10000px;
        visibility: hidden;
      }

      .right {
        position: absolute;
        right: 2rem;
      }
    `;
    }
};
__decorate([
    property({ type: Number })
], ResponsiveNav.prototype, "menuGap", void 0);
__decorate([
    property({ type: Boolean })
], ResponsiveNav.prototype, "showHiddenItems", void 0);
__decorate([
    property({ type: Boolean })
], ResponsiveNav.prototype, "showDevOutline", void 0);
__decorate([
    property({ type: String })
], ResponsiveNav.prototype, "id", void 0);
__decorate([
    property({ type: Object })
], ResponsiveNav.prototype, "resizeObserver", void 0);
__decorate([
    property({ type: Number })
], ResponsiveNav.prototype, "navItemSpacing", void 0);
__decorate([
    property({ type: String })
], ResponsiveNav.prototype, "leftMenuMode", void 0);
__decorate([
    property({ type: String })
], ResponsiveNav.prototype, "leftMenuDisplayMode", void 0);
__decorate([
    property({ type: String })
], ResponsiveNav.prototype, "rightMenuDisplayMode", void 0);
__decorate([
    query('#main-menu')
], ResponsiveNav.prototype, "mainMenu", void 0);
__decorate([
    query('#hamburger-menu')
], ResponsiveNav.prototype, "hamburgerMenu", void 0);
__decorate([
    query('#right-menu')
], ResponsiveNav.prototype, "rightMenu", void 0);
ResponsiveNav = __decorate([
    customElement('responsive-nav')
], ResponsiveNav);
export { ResponsiveNav };
//# sourceMappingURL=responsive-nav.js.map