import { __decorate } from "tslib";
import { html, css, LitElement, property, customElement, query, } from 'lit-element';
import { ResponsiveNavMenuMode } from './models/menu-mode';
let ResponsiveNavItem = class ResponsiveNavItem extends LitElement {
    constructor() {
        super(...arguments);
        this.mode = ResponsiveNavMenuMode.IconText;
    }
    get estimatedFullWidth() {
        return (this.iconSizeEstimatorContainer.clientWidth +
            this.textSizeEstimatorContainer.clientWidth);
    }
    get estimatedIconOnlyWidth() {
        return this.iconSizeEstimatorContainer.clientWidth;
    }
    render() {
        return html `
      <div class="${this.mode} container">
        <span class="icon">${this.icon}</span>
        <span class="text">${this.text}</span>
      </div>
      <span class="icon size-estimator">${this.icon}</span>
      <span class="text size-estimator">${this.text}</span>
    `;
    }
    static get styles() {
        const colorCss = css `var(--responsive-nav-text-color, #ccc)`;
        const hoverCss = css `var(--responsive-nav-text-color, #eee)`;
        const iconSizeCss = css `var(--responsive-nav-icon-size, 3rem)`;
        const fontSizeCss = css `var(--responsive-nav-font-size, 1.4rem)`;
        return css `
      .container {
        display: flex;
        align-items: center;
        cursor: pointer;
      }

      .text {
        color: ${colorCss};
        font-size: ${fontSizeCss};
      }

      .container:hover .text {
        color: ${hoverCss};
      }

      svg {
        width: ${iconSizeCss};
        height: ${iconSizeCss};
      }

      svg .fill-color {
        fill: ${colorCss};
      }

      .container:hover svg .fill-color {
        fill: ${hoverCss};
      }

      .container.icon-only .text {
        display: none;
      }

      .size-estimator {
        position: absolute;
        left: -10000px;
        visibility: hidden;
      }
    `;
    }
};
__decorate([
    property({ type: String })
], ResponsiveNavItem.prototype, "mode", void 0);
__decorate([
    property({ type: Object })
], ResponsiveNavItem.prototype, "icon", void 0);
__decorate([
    property({ type: String })
], ResponsiveNavItem.prototype, "text", void 0);
__decorate([
    query('.icon')
], ResponsiveNavItem.prototype, "iconContainer", void 0);
__decorate([
    query('.text')
], ResponsiveNavItem.prototype, "textContainer", void 0);
__decorate([
    query('.text.size-estimator')
], ResponsiveNavItem.prototype, "textSizeEstimatorContainer", void 0);
__decorate([
    query('.icon.size-estimator')
], ResponsiveNavItem.prototype, "iconSizeEstimatorContainer", void 0);
ResponsiveNavItem = __decorate([
    customElement('responsive-nav-item')
], ResponsiveNavItem);
export { ResponsiveNavItem };
//# sourceMappingURL=nav-item.js.map