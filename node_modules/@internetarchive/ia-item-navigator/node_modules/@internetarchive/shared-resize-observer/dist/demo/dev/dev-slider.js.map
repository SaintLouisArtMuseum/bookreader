{"version":3,"file":"dev-slider.js","sourceRoot":"","sources":["../../../demo/dev/dev-slider.ts"],"names":[],"mappings":";AAAA,OAAO,EACL,GAAG,EAEH,aAAa,EACb,IAAI,EACJ,UAAU,EACV,QAAQ,EACR,KAAK,GAEN,MAAM,aAAa,CAAC;AAGrB,IAAa,SAAS,GAAtB,MAAa,SAAU,SAAQ,UAAU;IAAzC;;QAKE,SAAI,GAAG,IAAI,CAAC;QAGZ,QAAG,GAAG,CAAC,CAAC;QAGR,QAAG,GAAG,GAAG,CAAC;QAGV,SAAI,GAAG,CAAC,CAAC;QAGT,UAAK,GAAG,CAAC,CAAC;IAiDZ,CAAC;IA7CS,YAAY;QAClB,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC3C,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC,cAAc,EAAE;YAC5C,MAAM,EAAE;gBACN,KAAK,EAAE,IAAI,CAAC,KAAK;aAClB;SACF,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED,IAAY,YAAY;QACtB,OAAO,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;IACrC,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;4BACa,IAAI,CAAC,KAAK;;;cAGxB,IAAI,CAAC,GAAG;cACR,IAAI,CAAC,GAAG;eACP,IAAI,CAAC,IAAI;gBACR,IAAI,CAAC,KAAK;;iBAET,IAAI,CAAC,YAAY;;yBAET,IAAI,CAAC,YAAY;KACrC,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,MAAM;QACf,MAAM,UAAU,GAAG,GAAG,CAAA,+BAA+B,CAAC;QACtD,MAAM,WAAW,GAAG,GAAG,CAAA,gCAAgC,CAAC;QAExD,OAAO,GAAG,CAAA;;;iBAGG,UAAU;;;;iBAIV,WAAW;;KAEvB,CAAC;IACJ,CAAC;CACF,CAAA;AAhEC;IADC,QAAQ,EAAE;wCACI;AAGf;IADC,QAAQ,EAAE;uCACC;AAGZ;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;sCACnB;AAGR;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;sCACjB;AAGV;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;uCAClB;AAGT;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;wCACjB;AAEQ;IAAjB,KAAK,CAAC,SAAS,CAAC;yCAA2B;AAnBjC,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC;GACf,SAAS,CAkErB;SAlEY,SAAS","sourcesContent":["import {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  query,\n  TemplateResult,\n} from 'lit-element';\n\n@customElement('dev-slider')\nexport class DevSlider extends LitElement {\n  @property()\n  label?: string;\n\n  @property()\n  unit = 'px';\n\n  @property({ type: Number })\n  min = 0;\n\n  @property({ type: Number })\n  max = 100;\n\n  @property({ type: Number })\n  step = 1;\n\n  @property({ type: Number })\n  value = 1;\n\n  @query('#slider') slider!: HTMLInputElement;\n\n  private valueChanged(): void {\n    this.value = parseFloat(this.slider.value);\n    const event = new CustomEvent('valueChanged', {\n      detail: {\n        value: this.value,\n      },\n    });\n    this.dispatchEvent(event);\n  }\n\n  private get displayValue(): string {\n    return `${this.value}${this.unit}`;\n  }\n\n  render(): TemplateResult {\n    return html`\n      <label for=\"slider\">${this.label}</label>\n      <input\n        type=\"range\"\n        min=${this.min}\n        max=${this.max}\n        step=${this.step}\n        value=${this.value}\n        id=\"slider\"\n        @input=${this.valueChanged}\n      />\n      <span id=\"value\">${this.displayValue}</span>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    const labelWidth = css`var(--dev-label-width, 15rem)`;\n    const sliderWidth = css`var(--dev-slider-width, 25rem)`;\n\n    return css`\n      label {\n        display: inline-block;\n        width: ${labelWidth};\n      }\n\n      input[type='range'] {\n        width: ${sliderWidth};\n      }\n    `;\n  }\n}\n"]}