import { ResizeObserver as Polyfill } from '@juggle/resize-observer';
const ResizeObserver = window.ResizeObserver || Polyfill;
/** @inheritdoc */
export class SharedResizeObserver {
    constructor() {
        /**
         * This is the ResizeObserver that dispatches
         * callbacks to all of the handlers.
         *
         * @private
         * @memberof SharedResizeObserver
         */
        this.resizeObserver = new ResizeObserver(entries => {
            // This requestAnimationFrame is to throttle the refresh rate,
            // otherwise you get a bunch of
            // `ResizeObserver loop completed with undelivered notifications` errors
            // The errors are not harmful, but they happen a lot, see:
            // https://stackoverflow.com/a/58701523
            // https://github.com/souporserious/react-measure/issues/104
            // https://github.com/WICG/resize-observer/issues/38
            window.requestAnimationFrame(() => {
                for (const entry of entries) {
                    const handlers = this.resizeHandlers.get(entry.target);
                    handlers === null || handlers === void 0 ? void 0 : handlers.forEach(handler => {
                        handler.handleResize(entry);
                    });
                }
            });
        });
        /**
         * A map of all of the observed elements and their resize handlers
         *
         * @private
         * @type {Map<
         *     Element,
         *     Set<SharedResizeObserverResizeHandlerInterface>
         *   >}
         * @memberof SharedResizeObserver
         */
        this.resizeHandlers = new Map();
    }
    /** @inheritdoc */
    addObserver(options) {
        var _a;
        const handlers = (_a = this.resizeHandlers.get(options.target)) !== null && _a !== void 0 ? _a : new Set();
        handlers.add(options.handler);
        this.resizeHandlers.set(options.target, handlers);
        this.resizeObserver.observe(options.target, options.options);
    }
    /** @inheritdoc */
    removeObserver(options) {
        const handlers = this.resizeHandlers.get(options.target);
        if (!handlers)
            return;
        this.resizeObserver.unobserve(options.target);
        handlers.delete(options.handler);
        if (handlers.size === 0) {
            this.resizeHandlers.delete(options.target);
        }
    }
}
//# sourceMappingURL=shared-resize-observer.js.map