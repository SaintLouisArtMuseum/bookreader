{"version":3,"file":"shared-resize-observer.test.js","sourceRoot":"","sources":["../../test/shared-resize-observer.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@open-wc/testing';\nimport {\n  SharedResizeObserver,\n  SharedResizeObserverResizeHandlerInterface,\n} from '../src/shared-resize-observer';\nimport { promisedSleep } from './promised-sleep';\n\ndescribe('Shared Resize Observer', () => {\n  let el: HTMLElement;\n\n  beforeEach((done): void => {\n    el = document.createElement('div');\n    el.style.width = '100px';\n    el.style.height = '100px';\n    document.body.appendChild(el);\n    // Make sure it's a clean frame to run the test on\n    requestAnimationFrame((): void => done());\n  });\n\n  afterEach((): void => {\n    while (document.body.firstElementChild) {\n      document.body.removeChild(document.body.firstElementChild);\n    }\n  });\n\n  it('dispatches a handleResize event to handlers', async () => {\n    let handleResizeCalled = false;\n    let x = -1;\n    let y = -1;\n    let width = -1;\n    let right = -1;\n\n    class MockHandler implements SharedResizeObserverResizeHandlerInterface {\n      handleResize(entry: ResizeObserverEntry): void {\n        x = entry.contentRect.x;\n        y = entry.contentRect.y;\n        width = entry.contentRect.width;\n        right = entry.contentRect.right;\n        handleResizeCalled = true;\n      }\n    }\n\n    const mockHandler = new MockHandler();\n    const resizeObserver = new SharedResizeObserver();\n    resizeObserver.addObserver({\n      handler: mockHandler,\n      target: el,\n    });\n    // since the dispatch is asynchronous, we need to wait for it to be called\n    // it should be really fast, though\n    await promisedSleep(100);\n\n    expect(handleResizeCalled).to.be.true;\n    expect(x).to.equal(0);\n    expect(y).to.equal(0);\n    expect(width).to.equal(100);\n    expect(right).to.equal(100);\n  });\n\n  it('dispatches handleResize events to multiple handlers', async () => {\n    let handler1ResizeCalled = false;\n    let handler2ResizeCalled = false;\n\n    class MockHandler1 implements SharedResizeObserverResizeHandlerInterface {\n      handleResize(entry: ResizeObserverEntry): void {\n        handler1ResizeCalled = true;\n      }\n    }\n\n    class MockHandler2 implements SharedResizeObserverResizeHandlerInterface {\n      handleResize(entry: ResizeObserverEntry): void {\n        handler2ResizeCalled = true;\n      }\n    }\n\n    const mockHandler1 = new MockHandler1();\n    const mockHandler2 = new MockHandler2();\n\n    const resizeObserver = new SharedResizeObserver();\n    resizeObserver.addObserver({\n      handler: mockHandler1,\n      target: el,\n    });\n    resizeObserver.addObserver({\n      handler: mockHandler2,\n      target: el,\n    });\n\n    // since the dispatch is asynchronous, we need to wait for it to be called\n    // it should be really fast, though\n    await promisedSleep(100);\n\n    expect(handler1ResizeCalled).to.be.true;\n    expect(handler2ResizeCalled).to.be.true;\n  });\n\n  it('can remove a handler', async () => {\n    let handleResizeCallCount = 0;\n    class MockHandler implements SharedResizeObserverResizeHandlerInterface {\n      handleResize(entry: ResizeObserverEntry): void {\n        handleResizeCallCount++;\n      }\n    }\n\n    const mockHandler = new MockHandler();\n\n    const resizeObserver = new SharedResizeObserver();\n    resizeObserver.addObserver({\n      handler: mockHandler,\n      target: el,\n    });\n    await promisedSleep(100);\n    expect(handleResizeCallCount).to.equal(1);\n    // trigger a handleResize event\n    el.style.width = '50px';\n    await promisedSleep(100);\n    expect(handleResizeCallCount).to.equal(2);\n\n    resizeObserver.removeObserver({\n      handler: mockHandler,\n      target: el,\n    });\n    // trigger another handleResize, but this one won't trigger a resize event\n    el.style.width = '75px';\n    await promisedSleep(100);\n    expect(handleResizeCallCount).to.equal(2);\n  });\n\n  it('prevents adding a handler twice', async () => {\n    let handleResizeCallCount = 0;\n    class MockHandler implements SharedResizeObserverResizeHandlerInterface {\n      handleResize(entry: ResizeObserverEntry): void {\n        handleResizeCallCount++;\n      }\n    }\n\n    const mockHandler = new MockHandler();\n\n    const resizeObserver = new SharedResizeObserver();\n    resizeObserver.addObserver({\n      handler: mockHandler,\n      target: el,\n    });\n    await promisedSleep(100);\n    expect(handleResizeCallCount).to.equal(1);\n\n    // add the same observer again shouldn't trigger another event\n    resizeObserver.addObserver({\n      handler: mockHandler,\n      target: el,\n    });\n    await promisedSleep(100);\n    expect(handleResizeCallCount).to.equal(1);\n\n    el.style.width = '50px';\n    await promisedSleep(100);\n    expect(handleResizeCallCount).to.equal(2);\n  });\n});\n"]}