{"version":3,"file":"plugins/plugin.resume.js","mappings":"wJAgBO,SAASA,IAAkC,IAAhBC,EAAGC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,SACtC,IAEE,OADAJ,EAAIK,QACG,CACT,CAAE,MAAOC,GACP,OAAO,CACT,CACF,C,iMAEA,IAAMC,EAAkBR,IASjB,SAASS,EAAQC,GACtB,OAAIF,IAAoBE,EAAa,KAE9BC,mBAELN,SAASC,OAAOM,QAAQ,IAAIC,OAAO,mBAAqBC,mBAAmBJ,GAAME,QAAQ,cAAe,QAAU,+BAAgC,QAAU,IAChK,CAcO,SAASG,EAAQL,EAAMM,EAAQC,EAAMC,EAAOC,EAASC,GAC1D,OAAIZ,IAEJH,SAASC,OAASQ,mBAAmBJ,GAAQ,IAAMI,mBAAmBE,IACnEC,EAAO,aAAHI,OAAgBJ,EAAKK,eAAkB,KAC3CH,EAAU,YAAHE,OAAeF,GAAY,KAClCD,EAAQ,UAAHG,OAAaH,GAAU,KAC5BE,EAAU,WAAa,KAEnB,EACT,CAWO,SAASG,EAAWb,EAAMQ,EAAOC,GACtC,OAAIX,KAECgB,QAAQd,KAEbL,SAASC,OAASQ,mBAAmBJ,GAAQ,4CAC1CS,EAAU,YAAHE,OAAeF,GAAY,KAClCD,EAAQ,UAAHG,OAAaH,GAAU,KAExB,EACT,C,ICpEsCO,E,UAZtCC,WAAWC,WAAaA,EAKxBC,EAAOC,OAAOH,WAAWI,eAAgB,CACvCC,kBAAkB,EAElBC,iBAAkB,OAIpBN,WAAWO,UAAUC,MAAiBT,EAUnCC,WAAWO,UAAUC,KATf,WAAW,IAAAC,EAAA,KAChBV,EAAOW,KAAKC,MACRA,KAAKC,QAAQP,kBACfM,KAAKE,KAAKb,WAAWc,WAAWC,gBAAgB,WAC9C,IAAMC,EAASP,EAAKQ,oBACpBR,EAAKS,kBAAkBF,EAAOG,MAChC,GAEJ,GASFnB,WAAWO,UAAUa,eAAiB,WACpC,IAAMC,EAAMrB,WAAWC,WAAWlB,QAAQ,aAC1C,OAAY,OAARsC,EAAqBC,SAASD,GACtB,IACd,EAUArB,WAAWO,UAAUgB,cAAgB,SAASC,GAC5C,OAAOA,EAAYC,MAAM,0BAA0B,EACrD,EASAzB,WAAWO,UAAUW,kBAAoB,SAASC,EAAOO,GACvD,IAAMC,EAAM,IAAIC,MAAM,IAAIA,KAAO,SAG3BC,EAAOlB,KAAKC,QAAQN,kBACrBK,KAAKY,cAAcO,OAAOC,SAASC,UACxChC,WAAWC,WAAWZ,QAAQqC,GAAc,YAAaP,EAAOQ,EAAKE,EAAM,MAAM,EACnF,C","sources":["webpack://@internetarchive/bookreader/./src/util/docCookies.js","webpack://@internetarchive/bookreader/./src/plugins/plugin.resume.js"],"sourcesContent":["/**\r\n * Helper module use to get, set and remove item from cookie\r\n *\r\n * See more:\r\n *  https://developer.mozilla.org/en-US/docs/Web/API/document.cookie\r\n *  https://developer.mozilla.org/User:fusionchess\r\n *  https://github.com/madmurphy/cookies.js\r\n *  This framework is released under the GNU Public License, version 3 or later.\r\n *  http://www.gnu.org/licenses/gpl-3.0-standalone.html\r\n */\r\n\r\n/**\r\n * Check to see if the browser has cookies enabled.\r\n * Accessing document.cookies errors if eg iframe with sandbox enabled.\r\n * @returns {boolean}\r\n */\r\nexport function areCookiesBlocked(doc = document) {\r\n  try {\r\n    doc.cookie;\r\n    return false;\r\n  } catch (e) {\r\n    return true;\r\n  }\r\n}\r\n\r\nconst COOKIES_BLOCKED = areCookiesBlocked();\r\n\r\n/**\r\n * Get specific key's value stored in cookie\r\n *\r\n * @param {string} sKey\r\n *\r\n * @returns {string|null}\r\n */\r\nexport function getItem(sKey) {\r\n  if (COOKIES_BLOCKED || !sKey) return null;\r\n\r\n  return decodeURIComponent(\r\n    // eslint-disable-next-line no-useless-escape\r\n    document.cookie.replace(new RegExp('(?:(?:^|.*;)\\\\s*' + encodeURIComponent(sKey).replace(/[\\-\\.\\+\\*]/g, '\\\\$&') + '\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$'), '$1')) || null;\r\n}\r\n\r\n/**\r\n * Set specific key's value in cookie\r\n *\r\n * @param {string} sKey cookie name\r\n * @param {string} sValue cookie value\r\n * @param {string} [vEnd] expire|max-age\r\n * @param {string} [sPath] path of current item\r\n * @param {string} [sDomain] domain name\r\n * @param {boolean} [bSecure]\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function setItem(sKey, sValue, vEnd, sPath, sDomain, bSecure) {\r\n  if (COOKIES_BLOCKED) return false;\r\n\r\n  document.cookie = encodeURIComponent(sKey) + '=' + encodeURIComponent(sValue)\r\n  + (vEnd ? `; expires=${vEnd.toUTCString()}` : '')\r\n  + (sDomain ? `; domain=${sDomain}` : '')\r\n  + (sPath ? `; path=${sPath}` : '')\r\n  + (bSecure ? `; secure` : '');\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * BROKEN Remove specific key's value from cookie\r\n * @fixme hasItem isn't even implemented! This will always error.\r\n * @param {string} sKey cookie name\r\n * @param {string} [sPath] path of current item\r\n * @param {string} [sDomain]\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function removeItem(sKey, sPath, sDomain) {\r\n  if (COOKIES_BLOCKED) return false;\r\n  // eslint-disable-next-line\r\n  if (!hasItem(sKey)) return false;\r\n\r\n  document.cookie = encodeURIComponent(sKey) + `=; expires=Thu, 01 Jan 1970 00:00:00 GMT`\r\n  + (sDomain ? `; domain=${sDomain}` : '')\r\n  + (sPath ? `; path=${sPath}` : '');\r\n\r\n  return true;\r\n}\r\n","import * as docCookies from '../util/docCookies.js';\r\n\r\n/* global BookReader */\r\n\r\n/** @deprecated Exposed for backward compatibility */\r\nBookReader.docCookies = docCookies;\r\n\r\n/**\r\n * Plugin to remember the current page number in a cookie\r\n */\r\njQuery.extend(BookReader.defaultOptions, {\r\n  enablePageResume: true,\r\n  /** @type {string|null} eg '/', '/details/id' */\r\n  resumeCookiePath: null,\r\n});\r\n\r\n/** @override */\r\nBookReader.prototype.init = (function(super_) {\r\n  return function() {\r\n    super_.call(this);\r\n    if (this.options.enablePageResume) {\r\n      this.bind(BookReader.eventNames.fragmentChange, () => {\r\n        const params = this.paramsFromCurrent();\r\n        this.updateResumeValue(params.index);\r\n      });\r\n    }\r\n  };\r\n})(BookReader.prototype.init);\r\n\r\n/**\r\n * Gets page resume value, for remembering reader's page\r\n * Can be overridden for different implementation\r\n *\r\n * @return {number|null}\r\n */\r\nBookReader.prototype.getResumeValue = function() {\r\n  const val = BookReader.docCookies.getItem('br-resume');\r\n  if (val !== null) return parseInt(val);\r\n  else return null;\r\n};\r\n\r\n/**\r\n * Return cookie path using pathname up to /page/... or /mode/...\r\n * using window.location.pathname for urlPathPart:\r\n * - matches encoding\r\n * - ignores querystring part\r\n * - ignores fragment part (after #)\r\n * @param {string} urlPathPart - window.location.pathname\r\n */\r\nBookReader.prototype.getCookiePath = function(urlPathPart) {\r\n  return urlPathPart.match('.+?(?=/page/|/mode/|$)')[0];\r\n};\r\n\r\n/**\r\n * Sets page resume value, for remembering reader's page\r\n * Can be overridden for different implementation\r\n *\r\n * @param {Number} index leaf index\r\n * @param {string} [cookieName]\r\n */\r\nBookReader.prototype.updateResumeValue = function(index, cookieName) {\r\n  const ttl = new Date(+new Date + 12096e5); // 2 weeks\r\n  // For multiple files in item, leave resumeCookiePath blank\r\n  // It's likely we can remove resumeCookiePath using getCookiePath()\r\n  const path = this.options.resumeCookiePath\r\n    || this.getCookiePath(window.location.pathname);\r\n  BookReader.docCookies.setItem(cookieName || 'br-resume', index, ttl, path, null, false);\r\n};\r\n"],"names":["areCookiesBlocked","doc","arguments","length","undefined","document","cookie","e","COOKIES_BLOCKED","getItem","sKey","decodeURIComponent","replace","RegExp","encodeURIComponent","setItem","sValue","vEnd","sPath","sDomain","bSecure","concat","toUTCString","removeItem","hasItem","super_","BookReader","docCookies","jQuery","extend","defaultOptions","enablePageResume","resumeCookiePath","prototype","init","_this","call","this","options","bind","eventNames","fragmentChange","params","paramsFromCurrent","updateResumeValue","index","getResumeValue","val","parseInt","getCookiePath","urlPathPart","match","cookieName","ttl","Date","path","window","location","pathname"],"sourceRoot":""}